import os
import requests
import time
import json
from datetime import datetime
from dotenv import load_dotenv

# Load .env for MetaDefender API key
load_dotenv()
METADEFENDER_API_KEY = os.getenv("METADEFENDER_API_KEY")

# Headers for MetaDefender
HEADERS = {
    "apikey": METADEFENDER_API_KEY,
    "Content-Type": "application/json",
    "Accept": "application/json"
}

# File paths
INPUT_FILE = "json_output/repo_files.json"
OUTPUT_FILE = "json_output/vulnerabilities.json"

def classify_binary(binary):
    sha256 = binary.get('sha256')
    if not sha256:
        return {"status": "error", "reason": "Missing SHA256"}

    response = requests.get(
        f"https://api.metadefender.com/v4/hash/{sha256}",
        headers=HEADERS
    )

    if response.status_code == 429:
        print("‚ö†Ô∏è Rate limit exceeded, pausing for 1 min...")
        time.sleep(60)
        return classify_binary(binary)

    if response.status_code == 404:
        print(f"‚ùì Hash not found on MetaDefender: {sha256}")
        return {
            "fileName": binary.get("fileName"),
            "sha256": sha256,
            "category": "unknown",
            "classificationReason": "Hash not found in MetaDefender database.",
            "description": "No information available."
        }

    if response.status_code != 200:
        return {"status": "error", "reason": f"MetaDefender API error {response.status_code}"}

    data = response.json()

    total_engines = data.get("scan_results", {}).get("total_avs", 0)
    total_detections = data.get("scan_results", {}).get("total_detected_avs", 0)

    # Calculate detection rate
    if total_engines > 0:
        detection_rate = (total_detections / total_engines) * 100
    else:
        detection_rate = 0

    # Classify based on detection rate
    if detection_rate >= 30:
        category = "malware"
    elif detection_rate >= 5:
        category = "suspicious"
    else:
        category = "safe"

    return {
        "fileName": binary.get("fileName"),
        "sha256": sha256,
        "category": category,
        "classificationReason": f"Scanned by {total_engines} engines, {total_detections} detected ({detection_rate:.2f}% rate).",
        "description": data.get("file_info", {}).get("display_name", "No description available.")
    }

def detect_malware():
    with open(INPUT_FILE, "r") as f:
        input_data = json.load(f)

    binaries = input_data.get("binaries", [])

    if not binaries:
        print("‚ö†Ô∏è No binaries found.")
        return

    malware_list = []

    for binary in binaries:
        print(f"üß™ Scanning {binary.get('fileName')} with SHA256: {binary.get('sha256')}...")
        result = classify_binary(binary)

        if result.get("status") == "error":
            print(f"‚ùå Error: {result['reason']}")
            continue

        malware_list.append(result)
        time.sleep(1)  # Rate limit safe

    save_results(input_data, malware_list)

def save_results(input_data, malware_list):
    output_data = {
        "repositoryName": input_data.get("repositoryName", "unknown-repo"),
        "scanDate": input_data.get("scanDate", datetime.now().isoformat()),
        "malware": malware_list
    }

    os.makedirs(os.path.dirname(OUTPUT_FILE), exist_ok=True)
    with open(OUTPUT_FILE, "w") as f:
        json.dump(output_data, f, indent=2)

    print(f"‚úÖ Malware results saved to {OUTPUT_FILE}")

def main():
    detect_malware()

if __name__ == "__main__":
    main()
