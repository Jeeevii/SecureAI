import os
import requests
import time
import json
import logging
from datetime import datetime
from dotenv import load_dotenv
from requests.exceptions import RequestException

load_dotenv()
METADEFENDER_API_KEY = os.getenv("METADEFENDER_API_KEY")

HEADERS = {
    "apikey": METADEFENDER_API_KEY,
    "Content-Type": "application/json",
    "Accept": "application/json"
}

INPUT_FILE = "json_output/repo_files.json"
OUTPUT_FILE = "json_output/vulnerabilities.json"

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(message)s")
logger = logging.getLogger()

def classify_binary(binary, retries=3):
    sha256 = binary.get('sha256')
    if not sha256:
        return {"status": "error", "reason": "Missing SHA256"}

    try:
        response = requests.get(
            f"https://api.metadefender.com/v4/hash/{sha256}",
            headers=HEADERS
        )

        if response.status_code == 429:
            if retries > 0:
                wait_time = 2 ** (3 - retries)
                logger.warning(f"Rate limit exceeded, retrying in {wait_time}s...")
                time.sleep(wait_time)
                return classify_binary(binary, retries=retries-1)
            else:
                logger.error(f"Rate limit exceeded for {sha256}, skipping.")
                return {"status": "error", "reason": "Rate limit exceeded"}

        if response.status_code == 404:
            logger.info(f"Hash not found on MetaDefender: {sha256}")
            return {
                "fileName": binary.get("fileName"),
                "sha256": sha256,
                "category": "unknown",
                "classificationReason": "Hash not found in MetaDefender database.",
                "description": "No information available."
            }

        if response.status_code != 200:
            logger.error(f"MetaDefender API error {response.status_code} for {sha256}")
            return {"status": "error", "reason": f"MetaDefender API error {response.status_code}"}

        data = response.json()
        total_engines = data.get("scan_results", {}).get("total_avs", 0)
        total_detections = data.get("scan_results", {}).get("total_detected_avs", 0)

        detection_rate = (total_detections / total_engines * 100) if total_engines else 0
        category = "safe" if detection_rate < 5 else "suspicious" if detection_rate < 30 else "malware"

        return {
            "fileName": binary.get("path"),
            "codeSnippet": sha256,
            "category": category,
            "classificationReason": f"Scanned by {total_engines} engines, {total_detections} detected ({detection_rate:.2f}% rate).",
            "description": data.get("file_info", {}).get("display_name", "No description available.")
        }

    except RequestException as e:
        logger.error(f"Request failed for {sha256}: {e}")
        return {"status": "error", "reason": f"Request failed: {str(e)}"}

def detect_malware():
    id = 0
    try:
        with open(INPUT_FILE, "r") as f:
            input_data = json.load(f)
        
        binaries = input_data.get("binaries", [])
        if not binaries:
            logger.warning("No binaries found.")
            return

        malware_list = []
        for binary in binaries:
            logger.info(f"Scanning {binary.get('fileName')} with SHA256: {binary.get('sha256')}...")
            result = classify_binary(binary)
            
            if result.get("status") == "error":
                logger.error(f"Error: {result['reason']}")
                continue
            result["id"] = id
            id += 1
            malware_list.append(result)
            time.sleep(1)  # Rate limit safe

        return malware_list

    except Exception as e:
        logger.error(f"Failed to detect malware: {str(e)}")



def main():
    detect_malware()

if __name__ == "__main__":
    main()
