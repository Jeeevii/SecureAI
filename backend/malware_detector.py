import requests
import json
import os
from dotenv import load_dotenv
load_dotenv()

# Your MetaDefender API key
METADEFENDER_API_KEY = os.getenv("METADEFENDER_API_KEY")

# Headers for MetaDefender API
HEADERS = {
    "apikey": METADEFENDER_API_KEY,
    "User-Agent": "MetaDefender",
    "Content-Type": "application/json",
    "Accept": "application/json"
}

INPUT_FILE = "json_output/repo_files.json"  # <- where the binaries are listed
OUTPUT_FILE = "json_output/vulnerabilities.json"  # <- where the results go

def classify_binary(binary):
    """
    Classify a single binary using MetaDefender API results based on its SHA256 hash.
    """
    sha256 = binary.get('sha256')
    if not sha256:
        return {"status": "error", "reason": "Missing SHA256"}

    # Make a request to MetaDefender to check the hash
    response = requests.get(
        f"https://api.metadefender.com/v4/hash/{sha256}",
        headers=HEADERS
    )

    if response.status_code != 200:
        return {"status": "error", "reason": f"MetaDefender API error {response.status_code}"}

    data = response.json()

    if not data.get('scan_results'):
        return {"status": "unknown", "sha256": sha256}

    # Check scan results
    malicious = data.get("scan_results", {}).get("malicious", 0)
    suspicious = data.get("scan_results", {}).get("suspicious", 0)

    if malicious > 0:
        category = "malware"
    elif suspicious > 0:
        category = "suspicious"
    else:
        category = "safe"

    return {
        "fileName": binary.get("fileName"),
        "sha256": sha256,
        "category": category,
        "classificationReason": f"MetaDefender malicious: {malicious}, suspicious: {suspicious}",
        "description": "File analysis by MetaDefender"
    }

def detect_malware():
    """
    Read binaries, classify them, and save to output.
    """
    # Load binaries
    with open(INPUT_FILE, "r") as f:
        input_data = json.load(f)

    binaries = input_data.get("binaries", [])

    if not binaries:
        print("‚ö†Ô∏è No binaries found in input file.")
        return

    malware_list = []

    for binary in binaries:
        sha256 = binary.get('sha256')
        if not sha256:
            continue

        # Now classify the binary using MetaDefender API
        print(f"üß™ Scanning {binary.get('fileName')} with SHA256: {sha256}...")

        result = classify_binary(binary)

        if result.get("status") == "error":
            print(f"‚ùå Error: {result['reason']}")
            continue

        if result.get("status") == "unknown":
            print(f"‚ùì Unknown file: {result['sha256']}")
            continue

        malware_list.append(result)

    save_results(input_data, malware_list)

def save_results(input_data, malware_list):
    """
    Save the scan results into the output file.
    """
    output_data = {
        "repositoryName": input_data.get("repositoryName", "unknown-repo"),
        "scanDate": input_data.get("scanDate", "unknown-date"),
        "malware": malware_list
    }

    with open(OUTPUT_FILE, "w") as f:
        json.dump(output_data, f, indent=2)

    print(f"‚úÖ Malware results saved to {OUTPUT_FILE}")

def main():
    detect_malware()

if __name__ == "__main__":
    main()
