[
  {
    "id": 1,
    "path": "README.md",
    "contents": "# Browser Logger  This is a website that shows everything a browser can reveal about the user **without any permissions**.  It captures and displays:  ## User Actions: - Text highlighting (selection) - Mouse movement and clicks - Key presses (key name, code, time) - Scroll position and behavior - Window focus/blur (detect tab switching) - Time spent on page - Resizing the window  ## Browser and Device Info: - Browser name and version - Operating system - Screen size and available viewport - Device type (mobile, desktop, tablet guess)  ## Network Info: - Public IP address - Approximate geolocation (via IP) - ISP (Internet Service Provider)  ## Other Details: - Referrer URL (where the user came from) - Current URL - Timezone and local time - Language settings - Cookies enabled/disabled - Battery status (level, charging) - Clipboard access attempt (only if user pastes)   This project shows **only what can be captured without prompting**. No popups, no permission dialogs.   All data is collected using JavaScript and public APIs. "
  },
  {
    "id": 2,
    "path": "index.css",
    "contents": ":root {   --primary-color: #2c3e50;   --accent-color: #3498db;   --bg-color: #f8f9fa;   --card-bg: #ffffff;   --text-color: #333333;   --header-bg: #34495e;   --header-text: #ecf0f1;   --log-bg: #f1f1f1;   --log-entry-bg: #ffffff; }  * {   box-sizing: border-box;   margin: 0;   padding: 0; }  body {   font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;   line-height: 1.6;   color: var(--text-color);   background-color: var(--bg-color);   padding-bottom: 2rem; }  header {   background-color: var(--header-bg);   color: var(--header-text);   padding: 2rem 1rem;   text-align: center; }  h1 {   margin-bottom: 0.5rem; }  main {   max-width: 1200px;   margin: 0 auto;   padding: 1rem; }  section {   margin-bottom: 2rem; }  h2 {   color: var(--primary-color);   border-bottom: 2px solid var(--accent-color);   padding-bottom: 0.5rem;   margin-bottom: 1rem; }  .grid-container {   display: grid;   grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));   gap: 1rem; }  .card {   background-color: var(--card-bg);   border-radius: 8px;   box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);   padding: 1rem;   transition: transform 0.3s ease; }  .card:hover {   transform: translateY(-5px);   box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1); }  h3 {   color: var(--accent-color);   margin-bottom: 0.5rem;   font-size: 1.1rem; }  .data {   font-family: monospace;   white-space: pre-wrap;   word-break: break-all;   overflow: hidden;   padding: 0.5rem;   background: #f5f5f5;   border-radius: 4px;   min-height: 30px; } /* I should make this not repeat and repeat code */ .data_logs {     font-family: monospace;     word-break: break-all;     margin-top: 1rem; } footer {   text-align: center;   margin-top: 2rem;   padding: 1rem;   background-color: var(--primary-color);   color: var(--header-text); }  .view-logs-btn {   background-color: var(--accent-color);   color: white;   border: none;   padding: 8px 15px;   border-radius: 4px;   cursor: pointer;   font-weight: bold;   width: 100%;   transition: background-color 0.2s; }  .view-logs-btn:hover {   background-color: #2980b9; }  .logs-container {   display: flex;   flex-direction: column;   gap: 1.5rem; }  .log-section {   background-color: var(--log-bg);   padding: 1rem;   border-radius: 8px; }  .log-content {   max-height: 400px;   overflow-y: auto;   background-color: var(--card-bg);   border-radius: 4px;   padding: 0.5rem; }  .log-entry {   padding: 8px;   margin-bottom: 8px;   border-bottom: 1px solid #ddd;   font-family: monospace; }  .log-entry:last-child {   border-bottom: none; }  .log-timestamp {   color: var(--accent-color);   font-weight: bold;   margin-right: 8px; }  .log-empty {   font-style: italic;   color: #777;   padding: 10px; }  #location-details .tabs {     display: flex;     margin-bottom: 10px; }  .tab-btn {     padding: 5px 10px;     border: none;     background-color: #f0f0f0;     cursor: pointer;     margin-right: 5px;     border-radius: 3px; }  .tab-btn.active {     background-color: #4CAF50;     color: white; }  .tab-content {     display: none; }  .tab-content.active {     display: block; }  #location-details {     grid-column: span 3; }  @media (max-width: 768px) {   header {     padding: 1rem;   } } "
  },
  {
    "id": 3,
    "path": "index.html",
    "contents": "<!DOCTYPE html> <html lang=\"en\">  <head>     <meta charset=\"UTF-8\">     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">     <title>Browser Logger</title>     <link rel=\"stylesheet\" href=\"index.css\"> </head>  <body>     <header>         <h1>Browser Logger</h1>         <p>Everything your browser reveals without permissions</p>     </header>      <main>         <section id=\"user-actions\">             <h2>User Actions</h2>             <div class=\"grid-container\">                 <div class=\"card\" id=\"text-selection\">                     <h3>Text Selection</h3>                     <div class=\"data\">Nothing selected</div>                 </div>                 <!-- Having two IDs here doesn't seem clean-->                 <div class=\"card\" id=\"mouse\">                     <h3>Mouse Activity</h3>                     <div class=\"data\" id=\"mouse-position\">Position: X: 0, Y: 0</div>                     <div class=\"data\" id=\"mouse-click\">Last click: None</div>                 </div>                 <div class=\"card\" id=\"keyboard\">                     <h3>Keyboard Input</h3>                     <div class=\"data\">Last key: None</div>                 </div>                 <div class=\"card\" id=\"scroll\">                     <h3>Scroll Position</h3>                     <div class=\"data\">X: 0, Y: 0</div>                 </div>                 <div class=\"card\" id=\"focus\">                     <h3>Window Focus</h3>                     <div class=\"data\">Currently focused</div>                 </div>                 <div class=\"card\" id=\"time\">                     <h3>Time on Page</h3>                     <div class=\"data\">0 seconds</div>                 </div>                 <div class=\"card\" id=\"resize\">                     <h3>Window Resizing</h3>                     <div class=\"data\">No resize events</div>                 </div>                 <div class=\"card\" id=\"view-logs\" class=\"view-logs-card\">                     <h3>View All Logs</h3>                     <div class=\"data_logs\">                         <button id=\"view-logs-btn\" class=\"view-logs-btn\">View Detailed Activity Logs</button>                     </div>                 </div>             </div>         </section>          <section id=\"device-info\">             <h2>Browser and Device Info</h2>             <div class=\"grid-container\">                 <div class=\"card\" id=\"browser\">                     <h3>Browser</h3>                     <div class=\"data\">Loading...</div>                 </div>                 <div class=\"card\" id=\"os\">                     <h3>Operating System</h3>                     <div class=\"data\">Loading...</div>                 </div>                 <div class=\"card\" id=\"screen\">                     <h3>Screen & Viewport</h3>                     <div class=\"data\">Loading...</div>                 </div>                 <div class=\"card\" id=\"device\">                     <h3>Device Type</h3>                     <div class=\"data\">Loading...</div>                 </div>             </div>         </section>          <section id=\"network-info\">             <h2>Network and Location Info</h2>             <div class=\"grid-container\">                 <div class=\"card\" id=\"ip\">                     <h3>Public IP Address</h3>                     <div class=\"data\">Loading...</div>                 </div>                 <div class=\"card\" id=\"version\">                     <h3>IP version</h3>                     <div class=\"data\">Loading...</div>                 </div>                 <div class=\"card\" id=\"geolocation\">                     <h3>Approximate Location</h3>                     <div class=\"data\">Loading...</div>                 </div>                  <div class=\"card\" id=\"zip-code\">                     <h3>Zip Code</h3>                     <div class=\"data\">Loading...</div>                 </div>                  <div class=\"card\" id=\"location-coordinates\">                     <h3>Coordinates</h3>                     <div class=\"data\">Loading...</div>                 </div>                  <div class=\"card\" id=\"isp\">                     <h3>Internet Service Provider</h3>                     <div class=\"data\">Loading...</div>                 </div>                  <div class=\"card\" id=\"organization\">                     <h3>Organization</h3>                     <div class=\"data\">Loading...</div>                 </div>              </div>         </section>          <section id=\"other-details\">             <h2>Other Details</h2>             <div class=\"grid-container\">                 <div class=\"card\" id=\"referrer\">                     <h3>Referrer URL</h3>                     <div class=\"data\">Loading...</div>                 </div>                 <div class=\"card\" id=\"current-url\">                     <h3>Current URL</h3>                     <div class=\"data\">Loading...</div>                 </div>                 <div class=\"card\" id=\"timezone\">                     <h3>Timezone & Local Time</h3>                     <div class=\"data\">Loading...</div>                 </div>                 <div class=\"card\" id=\"language\">                     <h3>Language Settings</h3>                     <div class=\"data\">Loading...</div>                 </div>                 <div class=\"card\" id=\"cookies\">                     <h3>Cookies Enabled</h3>                     <div class=\"data\">Loading...</div>                 </div>                 <div class=\"card\" id=\"battery\">                     <h3>Battery Status</h3>                     <div class=\"data\">Loading...</div>                 </div>                 <div class=\"card\" id=\"clipboard\">                     <h3>Clipboard</h3>                     <div class=\"data\">Try pasting something (Ctrl+V)</div>                 </div>             </div>         </section>          <section id=\"all-logs\">             <h2>All Logs</h2>             <div class=\"logs-container\">                 <div class=\"log-section\">                     <h3>Text Input Logs</h3>                     <div id=\"text-input-logs\" class=\"log-content\"></div>                 </div>                 <div class=\"log-section\">                     <h3>Text Selection Logs</h3>                     <div id=\"text-selection-logs\" class=\"log-content\"></div>                 </div>                 <div class=\"log-section\">                     <h3>Mouse Click Logs</h3>                     <div id=\"click-logs\" class=\"log-content\"></div>                 </div>                 <div class=\"log-section\">                     <h3>Clipboard Paste Logs</h3>                     <div id=\"paste-logs\" class=\"log-content\"></div>                 </div>                 <div class=\"log-section\">                     <h3>Window Focus Logs</h3>                     <div id=\"focus-logs\" class=\"log-content\"></div>                 </div>             </div>         </section>     </main>      <footer>         <p>All data is collected using JavaScript and public APIs - No permissions required (I don't save this data             either)</p>     </footer>      <script src=\"index.js\"></script> </body>  </html> "
  },
  {
    "id": 4,
    "path": "index.js",
    "contents": "function initBrowserLogger() {     const startTime = new Date();     const logs = {         textInput: [],         textSelection: [],         mouseClicks: [],         clipboardPastes: [],         windowFocus: []     };          function getTimestamp() {         const now = new Date();         return now.toLocaleTimeString() + '.' + now.getMilliseconds().toString().padStart(3, '0');     }          function addLogEntry(logType, content) {         if (logs[logType]) {             const timestamp = getTimestamp();             logs[logType].push({ timestamp, content });             updateLogDisplay(logType);         }     }          function updateLogDisplay(logType) {         const logElementMap = {             textInput: 'text-input-logs',             textSelection: 'text-selection-logs',             mouseClicks: 'click-logs',             clipboardPastes: 'paste-logs',             windowFocus: 'focus-logs'         };                  const elementId = logElementMap[logType];         if (!elementId) return;                  const logContainer = document.getElementById(elementId);         if (!logContainer) return;                  if (logs[logType].length === 0) {             logContainer.innerHTML = '<div class=\"log-empty\">No logs yet</div>';             return;         }                  let html = '';         logs[logType].slice().reverse().forEach(log => {             html += `<div class=\"log-entry\">                 <span class=\"log-timestamp\">[${log.timestamp}]</span>                 <span class=\"log-content\">${log.content}</span>             </div>`;         });                  logContainer.innerHTML = html;     }          function initLogDisplays() {         Object.keys(logs).forEach(logType => {             updateLogDisplay(logType);         });     }          document.getElementById('view-logs-btn').addEventListener('click', () => {         document.getElementById('all-logs').scrollIntoView({             behavior: 'smooth'         });     });      // USER ACTIONS     document.addEventListener('selectionchange', () => {         const selection = document.getSelection();         const text = selection.toString();         updateElement('text-selection', text ? `\"${text}\"` : 'Nothing selected');                  if (text) {             addLogEntry('textSelection', `Selected text: \"${text}\"`);         }     });      document.addEventListener('mousemove', (e) => {         document.getElementById('mouse-position').textContent = `Position: X: ${e.clientX}, Y: ${e.clientY}`;     });      document.addEventListener('click', (e) => {         document.getElementById('mouse-position').textContent = `Position: X: ${e.clientX}, Y: ${e.clientY}`;         document.getElementById('mouse-click').textContent = `Last click: X: ${e.clientX}, Y: ${e.clientY}`;                  addLogEntry('mouseClicks', `Clicked at X: ${e.clientX}, Y: ${e.clientY} (Target: ${e.target.tagName.toLowerCase()}${e.target.id ? ' #' + e.target.id : ''})`);     });      document.addEventListener('keydown', (e) => {         updateElement('keyboard', `Last key: ${e.key} (code: ${e.code})`);                  // Don't log modifier keys alone         if (!['Control', 'Shift', 'Alt', 'Meta'].includes(e.key)) {             addLogEntry('textInput', `Key pressed: ${e.key} (code: ${e.code})`);         }     });      window.addEventListener('scroll', () => {         const scrollX = window.scrollX || window.pageXOffset;         const scrollY = window.scrollY || window.pageYOffset;         updateElement('scroll', `X: ${scrollX}, Y: ${scrollY}`);     });      window.addEventListener('focus', () => {         updateElement('focus', 'Currently focused');         addLogEntry('windowFocus', 'Window gained focus');     });      window.addEventListener('blur', () => {         updateElement('focus', 'Not focused (switched tabs)');         addLogEntry('windowFocus', 'Window lost focus (switched tabs)');     });      timeOnPageInterval = setInterval(() => {         const now = new Date();         const timeSpent = Math.floor((now - startTime) / 1000);         const minutes = Math.floor(timeSpent / 60);         const seconds = timeSpent % 60;         updateElement('time', `${minutes}m ${seconds}s`);     }, 1000);      let resizeTimeout;     window.addEventListener('resize', () => {         clearTimeout(resizeTimeout);         resizeTimeout = setTimeout(() => {             const dimensions = `${window.innerWidth}px × ${window.innerHeight}px`;             updateElement('resize', `Window resized to: ${dimensions}`);             addLogEntry('windowFocus', `Window resized to: ${dimensions}`);         }, 500);     });      // BROWSER AND DEVICE INFO     function detectBrowser() {         const userAgent = navigator.userAgent;         let browserName = \"Unknown\";         let browserVersion = \"\";          if (userAgent.match(/chrome|chromium|crios/i)) {             browserName = \"Chrome\";         } else if (userAgent.match(/firefox|fxios/i)) {             browserName = \"Firefox\";         } else if (userAgent.match(/safari/i)) {             browserName = \"Safari\";         } else if (userAgent.match(/opr\\//i)) {             browserName = \"Opera\";         } else if (userAgent.match(/edg/i)) {             browserName = \"Edge\";         } else if (userAgent.match(/trident/i)) {             browserName = \"Internet Explorer\";         }          // version (kinda sketchy)         const match = userAgent.match(/(chrome|chromium|safari|firefox|msie|trident|edge(?=\\/)|opr)(\\/| )([0-9]+)/i);         if (match && match[3]) {             browserVersion = match[3];         }          return `${browserName} ${browserVersion}`;     }      function detectOS() {         const userAgent = navigator.userAgent;         let os = \"Unknown\";          if (userAgent.match(/windows nt/i)) {             const version = userAgent.match(/windows nt (\\d+\\.\\d+)/i);             const versions = {                 '10.0': 'Windows 10/11',                 '6.3': 'Windows 8.1',                 '6.2': 'Windows 8',                 '6.1': 'Windows 7',                 '6.0': 'Windows Vista',                 '5.1': 'Windows XP'             };             os = version ? versions[version[1]] || `Windows (NT ${version[1]})` : 'Windows';         } else if (userAgent.match(/macintosh|mac os x/i)) {             os = 'macOS';         } else if (userAgent.match(/linux/i)) {             os = 'Linux';         } else if (userAgent.match(/iphone|ipad|ipod/i)) {             os = 'iOS';         } else if (userAgent.match(/android/i)) {             os = 'Android';         }          return os;     }      function detectDeviceType() {         const userAgent = navigator.userAgent;         if (/(tablet|ipad|playbook|silk)|(android(?!.*mobi))/i.test(userAgent)) {             return 'Tablet';         } else if (/mobile|iphone|ipod|android|blackberry|opera mini|iemobile/i.test(userAgent)) {             return 'Mobile';         }         return 'Desktop';     }      function getScreenInfo() {         return `Screen: ${window.screen.width}×${window.screen.height}px\\nViewport: ${window.innerWidth}×${window.innerHeight}px`;     }      updateElement('browser', detectBrowser());     updateElement('os', detectOS());     updateElement('screen', getScreenInfo());     updateElement('device', detectDeviceType());      // NETWORK INFO         fetch('https://ipapi.co/json/')             .then(response => response.json())             .then(data => {                 //console.log('IP/location data:', data);                 updateElement('ip', data.ip);                                  updateElement('geolocation', `${data.city}, ${data.region}, ${data.country_name}`);                 updateElement('zip-code', data.postal || 'Not available');                 updateElement('location-coordinates', `Latitude: ${data.latitude}\\nLongitude: ${data.longitude}`);                 updateElement('isp', data.asn || 'Not available');                 updateElement('organization', data.org || 'Not available');                 updateElement('version', data.version || 'Not available');             })             .catch((err) => {                 console.error('Error fetching IP/location data:', err);                 updateElement('ip', 'Could not retrieve');                 updateElement('geolocation', 'Could not retrieve');                 updateElement('zip-code', 'Could not retrieve');                 updateElement('location-coordinates', 'Could not retrieve');                 updateElement('isp', 'Could not retrieve');                 updateElement('organization', 'Could not retrieve');             });          // OTHER DETAILS     updateElement('referrer', document.referrer || 'Direct navigation (no referrer)');     updateElement('current-url', window.location.href);     function updateLocalTime() {         const options = {              timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone,             timeZoneName: 'long',              hour: '2-digit',              minute: '2-digit',             second: '2-digit',             year: 'numeric',             month: 'short',             day: 'numeric'         };         const formatter = new Intl.DateTimeFormat('en-US', options);         const localTime = formatter.format(new Date());         const timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;                  updateElement('timezone', `${timezone}\\n${localTime}`);     }     updateLocalTime();     setInterval(updateLocalTime, 1000);      updateElement('language', navigator.language +          (navigator.languages ? `\\nAll: ${navigator.languages.join(', ')}` : ''));      updateElement('cookies', navigator.cookieEnabled ? 'Enabled' : 'Disabled');      if (navigator.getBattery) {         navigator.getBattery().then(battery => {             function updateBatteryStatus() {                 const level = Math.round(battery.level * 100);                 const charging = battery.charging ? 'Charging' : 'Not charging';                 updateElement('battery', `${level}% (${charging})`);             }                          updateBatteryStatus();             battery.addEventListener('levelchange', updateBatteryStatus);             battery.addEventListener('chargingchange', updateBatteryStatus);         });     } else {         updateElement('battery', 'API not available');     }      document.addEventListener('paste', (e) => {         e.preventDefault();         const text = e.clipboardData.getData('text/plain');         const displayText = text.substring(0, 50) + (text.length > 50 ? '...' : '');         updateElement('clipboard', `Pasted: \"${displayText}\"`);                  addLogEntry('clipboardPastes', `Pasted: \"${displayText}\"`);     });          initLogDisplays();     addLogEntry('windowFocus', 'Session started with window focused'); }  function updateElement(id, content) {     const element = document.getElementById(id);     if (element) {         const dataElement = element.querySelector('.data');         if (dataElement) {             dataElement.textContent = content;         }     } }  document.addEventListener('DOMContentLoaded', initBrowserLogger); "
  }
]