{
  "repositoryName": "example-repo",
  "scanDate": "2023-04-21T14:30:00Z",
  "issues": [
    {
      "id": 1,
      "fileName": "app.py",
      "lineNumber": 42,
      "issueType": "Hardcoded API Key",
      "severity": "high",
      "description": "API key directly embedded in the source code. This poses a security risk as credentials could be exposed in version control systems.",
      "codeSnippet": "api_key = 'sk-1234567890abcdef1234'\nresponse = openai.Completion.create(api_key=api_key)",
      "suggestedFix": "# Use environment variables instead\nimport os\napi_key = os.environ.get('OPENAI_API_KEY')\nresponse = openai.Completion.create(api_key=api_key)"
    },
    {
      "id": 2,
      "fileName": "server.js",
      "lineNumber": 78,
      "issueType": "Prompt Injection Vulnerability",
      "severity": "high",
      "description": "User input is directly concatenated into the prompt without proper sanitization, potentially allowing prompt injection attacks.",
      "codeSnippet": "const userInput = req.body.input;\nconst prompt = `Answer this question: ${userInput}`;\nconst response = await model.generate(prompt);",
      "suggestedFix": "const userInput = req.body.input;\n// Sanitize and validate user input\nconst sanitizedInput = sanitizeInput(userInput);\n// Use structured prompts with clear boundaries\nconst prompt = { \n  system: \"You are a helpful assistant.\",\n  user: sanitizedInput\n};\nconst response = await model.generate(prompt);"
    },
    {
      "id": 3,
      "fileName": "Dockerfile",
      "lineNumber": 15,
      "issueType": "Insecure Docker Configuration",
      "severity": "medium",
      "description": "Container is running as root, which could allow attackers to gain elevated privileges if they manage to escape the container.",
      "codeSnippet": "FROM python:3.9\nWORKDIR /app\nCOPY . .\nRUN pip install -r requirements.txt\nCMD [\"python\", \"app.py\"]",
      "suggestedFix": "FROM python:3.9-slim\nWORKDIR /app\nCOPY . .\nRUN pip install -r requirements.txt\n# Create non-root user\nRUN adduser --disabled-password --gecos '' appuser\nUSER appuser\nCMD [\"python\", \"app.py\"]"
    },
    {
      "id": 4,
      "fileName": "routes/api.js",
      "lineNumber": 127,
      "issueType": "Missing Rate Limiting",
      "severity": "low",
      "description": "The API endpoint lacks rate limiting, making it susceptible to abuse and potential denial-of-service attacks.",
      "codeSnippet": "app.post('/generate', async (req, res) => {\n  const result = await llmService.generate(req.body);\n  res.json(result);\n});",
      "suggestedFix": "const rateLimit = require('express-rate-limit');\n\nconst apiLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // Limit each IP to 100 requests per windowMs\n  standardHeaders: true,\n  message: 'Too many requests, please try again later.'\n});\n\napp.post('/generate', apiLimiter, async (req, res) => {\n  const result = await llmService.generate(req.body);\n  res.json(result);\n});"
    }
  ]
}