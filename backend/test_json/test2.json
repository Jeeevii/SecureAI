[
  {
    "id": 1,
    "path": "frontend/next.config.ts",
    "contents": "import type { NextConfig } from \"next\";  const nextConfig: NextConfig = {   /* config options here */ };  export default nextConfig; "
  },
  {
    "id": 2,
    "path": "frontend/src/app/animations.tsx",
    "contents": "\"use client\"  import { useEffect } from \"react\"  export default function AnimationObserver() {   useEffect(() => {     const observer = new IntersectionObserver(       (entries) => {         entries.forEach((entry) => {           if (entry.isIntersecting) {             entry.target.classList.add(\"in-view\")           }         })       },       {         root: null,         rootMargin: \"0px\",         threshold: 0.1,       },     )      const sections = document.querySelectorAll(\"section\")     sections.forEach((section) => {       observer.observe(section)     })      return () => {       sections.forEach((section) => {         observer.unobserve(section)       })     }   }, [])    return null }  "
  },
  {
    "id": 3,
    "path": "frontend/src/app/layout.tsx",
    "contents": "import type React from \"react\" import \"@/app/globals.css\" import type { Metadata } from \"next\" import { Inter } from \"next/font/google\" import { Analytics } from '@vercel/analytics/next';  const inter = Inter({ subsets: [\"latin\"] })  export const metadata: Metadata = {   title: \"Jeevithan Mahenthran | Full Stack Engineer\",   description: \"Jeevithan Mahenthran's portfolio website as a backend developer\", }  export default function RootLayout({   children, }: Readonly<{   children: React.ReactNode }>) {   return (     <html lang=\"en\" className=\"scroll-smooth\">       <body className={inter.className}>         {children}         <Analytics />         </body>     </html>   ) }  "
  },
  {
    "id": 4,
    "path": "frontend/src/app/page.tsx",
    "contents": "\"use client\" import Navbar from \"@/components/navbar\"; import Hero from \"@/components/hero\"; import About from \"@/components/about\"; import Skills from \"@/components/skills\"; import Projects from \"@/components/projects/projects\"; import Footer from \"@/components/footer\"; import { useState, useEffect } from \"react\";  export default function Home() {    const [isLoaded, setIsLoaded] = useState(false);    useEffect(() => {     setIsLoaded(true);   }, []);    return (     <div className=\"min-h-screen bg-zinc-900 text-zinc-100\">       <Navbar />       <main className=\"container mx-auto px-4 pt-24\">         <Hero/>         <About/>         <Projects isLoaded={isLoaded}/>         <Skills/>       </main>       <Footer/>     </div>   ); }"
  },
  {
    "id": 5,
    "path": "frontend/src/components/about.tsx",
    "contents": "/* eslint-disable react/no-unescaped-entities */ \"use client\";  import { useState, useEffect } from \"react\"; import Image from \"next/image\"; import { cn } from \"@/lib/utils\";  // eslint-disable-next-line @typescript-eslint/no-empty-object-type interface AboutProps {}  const About: React.FC<AboutProps> = () => {   const [isLoaded, setIsLoaded] = useState(false);    useEffect(() => {     setIsLoaded(true);   }, []);    return (     <section       id=\"about\"       className={cn(         \"py-20 border-t border-zinc-800 scroll-m-24 opacity-0 transform translate-y-10 transition-all duration-1000 ease-out delay-300\",         isLoaded && \"opacity-100 translate-y-0\",       )}     >       <h2 className=\"text-3xl font-bold mb-8 text-zinc-300\">About Me</h2>         <div className=\"grid md:grid-cols-2 gap-12 items-center\">           <div className=\"space-y-4\">             <p className=\"text-zinc-400\">               Hello! I'm a Computer Science student at UC Santa Cruz, graduating in June 2025. I love building full-stack websites from the ground up, but my real passion is in backend development. I enjoy working with APIs, databases, and server logic to create scalable, and efficient systems.                It's a bit hard to explain but, there's just something exciting about breaking down complex problems and turning them into clean, well-structured solutions.             </p>             <p className=\"text-zinc-400\">               Right now, I'm looking for entry-level software engineering roles or internships where I can continue learning, collaborating, and building real-world applications.                I thrive best in environments where I can get direct feedback to get things done without sugar-coating the challenges.              </p>             <p className=\"text-zinc-400\">               Outside the screen, you’ll probably find me on the basketball court, at the gym, or out fishing. I also love gaming with friends to wind down, and, of course, solving LeetCode problems...because at this point, NeetCode’s voice is my internal monologue.                Currently in an arguably overcommitted relationship with White Monster, I’m always up for a challenge, whether it’s in code, on the court, or in everyday life.             </p>           </div>           <div className=\"relative h-80 w-full rounded-lg overflow-hidden border border-zinc-800\">             <Image src=\"/projects/tonyCat.jpg\" alt=\"My Cat Tony\" fill className=\"object-cover\" />           </div>         </div>     </section>   ); };  export default About;"
  },
  {
    "id": 6,
    "path": "frontend/src/components/footer.tsx",
    "contents": "\"use client\";  import Link from \"next/link\"; import { Github, Linkedin, FileText } from \"lucide-react\";  // eslint-disable-next-line @typescript-eslint/no-empty-object-type interface FooterProps {}  const Footer: React.FC<FooterProps> = () => {   return (     <footer className=\"bg-zinc-950 py-12 mt-20\">       <div className=\"container mx-auto px-4\">         <div className=\"flex flex-col md:flex-row justify-between items-center\">           <div className=\"mb-6 md:mb-0\">             <p className=\"text-zinc-500\">© {new Date().getFullYear()} Jeevithan Mahenthran</p>           </div>           <div className=\"flex space-x-6\">             <Link href=\"https://github.com/jeeevii\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-zinc-500 hover:text-zinc-300\">               <Github className=\"h-5 w-5\" />               <span className=\"sr-only\">GitHub</span>             </Link>             <Link href=\"https://www.linkedin.com/in/jeevithan-mahenthran/\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-zinc-500 hover:text-zinc-300\">               <Linkedin className=\"h-5 w-5\" />               <span className=\"sr-only\">LinkedIn</span>             </Link>             <Link href=\"/docs/resume_spring2025.pdf\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-zinc-500 hover:text-zinc-300\">               <FileText className=\"h-5 w-5\" />               <span className=\"sr-only\">Resume</span>             </Link>           </div>         </div>       </div>     </footer>   ); };  export default Footer;"
  },
  {
    "id": 7,
    "path": "frontend/src/components/hero.tsx",
    "contents": "/* eslint-disable react/no-unescaped-entities */ \"use client\";  import { useState, useEffect } from \"react\"; import Link from \"next/link\"; import  DecryptButton from \"@/components/ui/decryptButton\" import { cn } from \"@/lib/utils\";  // eslint-disable-next-line @typescript-eslint/no-empty-object-type interface HeroProps {}  const Hero: React.FC<HeroProps> = () => {   const [isLoaded, setIsLoaded] = useState(false);   useEffect(() => {     setIsLoaded(true);   }, []);    return (     <section       className={cn(         \"py-20 md:py-32 opacity-0 transform translate-y-10 transition-all duration-1000 ease-out\",         isLoaded && \"opacity-100 translate-y-0\",       )}     >       <div className=\"max-w-4xl mx-auto text-center\">         <h1 className=\"text-5xl md:text-7xl font-bold tracking-tight mb-6\">           <span className=\"text-zinc-300\">Jeevithan Mahenthran</span>         </h1>         <p className=\"text-2xl md:text-3xl text-zinc-400 mb-8\">Backend Developer & Full Stack Engineer</p>           <p className=\"text-xl text-zinc-500 mb-12 max-w-2xl mx-auto\">             Hey, I'm a CS student at UC Santa Cruz who loves building full-stack apps with focus on backend development, seeking entry-level roles and internships to grow and gain more industry experience.           </p>         <div           className={cn(             \"flex justify-center space-x-8 mb-12 opacity-0 transform translate-y-10 transition-all duration-1000 ease-out delay-300\",             isLoaded && \"opacity-100 translate-y-0\",           )}         >           <Link href=\"https://github.com/jeeevii\" target=\"_blank\" rel=\"noopener noreferrer\">             <div className=\"flex flex-col items-center space-y-2\">               <div className=\"rounded-full h-20 w-20 flex items-center justify-center bg-zinc-800 border-2 border-zinc-700 hover:border-zinc-500 hover:bg-zinc-700 transition-all duration-300 p-4\">               <svg width=\"100\" height=\"100\" viewBox=\"0 0 100 100\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">                 <g id=\"github\">                   <g id=\"github_2\">                     <path id=\"Vector\" d=\"M50 1.00049C22.3892 1.00049 -0.000244141 23.386 -0.000244141 51.0007C-0.000244141 73.0924 14.3263 91.8345 34.1931 98.4461C36.6918 98.9088 37.6094 97.3614 37.6094 96.0406C37.6094 94.8485 37.5627 90.9095 37.5416 86.7316C23.6311 89.7562 20.6959 80.8322 20.6959 80.8322C18.4215 75.0528 15.1443 73.5163 15.1443 73.5163C10.608 70.4129 15.4863 70.4765 15.4863 70.4765C20.5073 70.8294 23.1511 75.6292 23.1511 75.6292C27.6105 83.2733 34.8479 81.0631 37.7012 79.7859C38.1498 76.5539 39.4458 74.3485 40.8756 73.0999C29.7701 71.8352 18.0952 67.5479 18.0952 48.3894C18.0952 42.9308 20.0485 38.4701 23.2472 34.9687C22.728 33.7091 21.0167 28.6238 23.7315 21.7366C23.7315 21.7366 27.9301 20.3927 37.4851 26.8619C41.4732 25.7537 45.7507 25.1985 50 25.1796C54.2492 25.1985 58.5298 25.7537 62.5258 26.8619C72.0694 20.3927 76.2622 21.7366 76.2622 21.7366C78.9836 28.6238 77.2715 33.7091 76.7523 34.9687C79.9581 38.4701 81.898 42.9304 81.898 48.3894C81.898 67.5934 70.2012 71.8223 59.0675 73.0599C60.8607 74.6116 62.4587 77.6546 62.4587 82.3192C62.4587 89.0091 62.4007 94.3936 62.4007 96.0406C62.4007 97.3712 63.3007 98.9304 65.8355 98.4394C85.6912 91.8204 99.9998 73.085 99.9998 51.0007C99.9998 23.386 77.6135 1.00049 50 1.00049Z\" fill=\"white\"/>                     <path id=\"Vector_2\" d=\"M18.7264 72.227C18.6166 72.4752 18.2252 72.5498 17.8696 72.3796C17.5068 72.2164 17.3029 71.8776 17.4206 71.6282C17.5284 71.3725 17.9198 71.3012 18.2817 71.4729C18.6452 71.6357 18.8523 71.9776 18.7264 72.227ZM21.1859 74.4215C20.9475 74.6426 20.4812 74.5399 20.1648 74.1905C19.8377 73.8419 19.7766 73.376 20.0185 73.1513C20.2644 72.9305 20.7165 73.0337 21.0444 73.3827C21.3714 73.7352 21.4349 74.1983 21.1855 74.4218L21.1859 74.4215ZM22.8733 77.2292C22.5667 77.4421 22.0655 77.2425 21.7561 76.7978C21.4498 76.3535 21.4498 75.8202 21.7628 75.6065C22.0733 75.3928 22.5667 75.5849 22.8804 76.0261C23.1862 76.4782 23.1862 77.0116 22.8729 77.2296L22.8733 77.2292ZM25.7266 80.4812C25.4524 80.7832 24.8689 80.7024 24.4415 80.2899C24.0047 79.8868 23.8827 79.3146 24.1576 79.0123C24.4348 78.7095 25.0219 78.7946 25.4524 79.2036C25.8865 79.606 26.0191 80.1824 25.7269 80.4812H25.7266ZM29.4143 81.5792C29.2939 81.9706 28.7316 82.1486 28.1653 81.9824C27.5998 81.811 27.2296 81.3522 27.3438 80.9565C27.4614 80.5624 28.0261 80.3769 28.5967 80.555C29.1613 80.7255 29.5323 81.1808 29.4147 81.5792H29.4143ZM33.6118 82.0447C33.6259 82.4573 33.1455 82.7992 32.551 82.8067C31.953 82.8196 31.4695 82.4859 31.4632 82.0804C31.4632 81.6639 31.9326 81.3251 32.5302 81.3153C33.1247 81.3036 33.6118 81.6349 33.6118 82.0447ZM37.7348 81.8867C37.8061 82.289 37.3928 82.7023 36.8027 82.8121C36.2223 82.918 35.685 82.6698 35.6109 82.271C35.5388 81.8584 35.9599 81.4455 36.5391 81.3385C37.1305 81.2357 37.6595 81.4777 37.7348 81.8867Z\" fill=\"white\"/>                   </g>                 </g>               </svg>                           </div>               <span className=\"text-zinc-400 font-medium\">GitHub</span>             </div>           </Link>           <Link href=\"https://www.linkedin.com/in/jeevithan-mahenthran/\" target=\"_blank\" rel=\"noopener noreferrer\">             <div className=\"flex flex-col items-center space-y-2\">               <div className=\"rounded-full h-20 w-20 flex items-center justify-center bg-zinc-800 border-2 border-zinc-700 hover:border-zinc-500 hover:bg-zinc-700 transition-all duration-300 p-4\">                 <svg viewBox=\"0 0 24 24\" className=\"h-10 w-10 text-zinc-100\" fill=\"currentColor\">                   <path d=\"M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm-11 19h-3v-11h3v11zm-1.5-12.268c-.966 0-1.75-.79-1.75-1.764s.784-1.764 1.75-1.764 1.75.79 1.75 1.764-.783 1.764-1.75 1.764zm13.5 12.268h-3v-5.604c0-3.368-4-3.113-4 0v5.604h-3v-11h3v1.765c1.396-2.586 7-2.777 7 2.476v6.759z\" />                 </svg>               </div>               <span className=\"text-zinc-400 font-medium\">LinkedIn</span>             </div>           </Link>           <Link href=\"/docs/resume_spring2025.pdf\" target=\"_blank\" rel=\"noopener noreferrer\">             <div className=\"flex flex-col items-center space-y-2\">               <div className=\"rounded-full h-20 w-20 flex items-center justify-center bg-zinc-800 border-2 border-zinc-700 hover:border-zinc-500 hover:bg-zinc-700 transition-all duration-300 p-4\">                 <svg                   viewBox=\"0 0 24 24\"                   className=\"h-10 w-10 text-zinc-100\"                   fill=\"none\"                   stroke=\"currentColor\"                   strokeWidth=\"2\"                   strokeLinecap=\"round\"                   strokeLinejoin=\"round\"                 >                   <path d=\"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z\"></path>                   <polyline points=\"14 2 14 8 20 8\"></polyline>                   <line x1=\"16\" y1=\"13\" x2=\"8\" y2=\"13\"></line>                   <line x1=\"16\" y1=\"17\" x2=\"8\" y2=\"17\"></line>                   <polyline points=\"10 9 9 9 8 9\"></polyline>                 </svg>               </div>               <span className=\"text-zinc-400 font-medium\">Resume</span>             </div>           </Link>         </div>           <DecryptButton />       </div>     </section>   ); };  export default Hero;"
  },
  {
    "id": 8,
    "path": "frontend/src/components/logo.tsx",
    "contents": "import { useState } from \"react\"; import Image from \"next/image\";  const JeeviLogo = () => {   const [isHovered, setIsHovered] = useState(false);    return (     <div       onMouseEnter={() => setIsHovered(true)}       onMouseLeave={() => setIsHovered(false)}       style={{ cursor: \"pointer\" }}     >       <Image         src={isHovered ? \"/gif/Jeevi_enlargedLogo.gif\" : \"/gif/big_jeevi.gif\"}         alt=\"Jeevi Logo\"         width={90}         height={50}         unoptimized       />     </div>   ); };  export default JeeviLogo;"
  },
  {
    "id": 9,
    "path": "frontend/src/components/navbar.tsx",
    "contents": "\"use client\";  import Link from \"next/link\"; import { Button } from \"@/components/ui/button\"; import {Menu, X, Mail, FileText} from \"lucide-react\" import Logo from \"./logo\" import { useState } from \"react\"; // eslint-disable-next-line @typescript-eslint/no-empty-object-type interface NavbarProps {}  const Navbar: React.FC<NavbarProps> = () => {   const [menuOpen, setMenuOpen] = useState(false);    return (     <header className=\"fixed top-0 w-full bg-zinc-900/80 backdrop-blur-sm z-50 border-b border-zinc-800\">       <div className=\"container mx-auto px-4 py-4 flex justify-between items-center\">         <Link href=\"#hero\" className=\"text-xl font-bold tracking-tighter\">           {/*className=\"object-contain h-12 w-auto\" */}           <div className=\"h-12 sm:h-12 w-auto flex items-center\">             <Logo />           </div>           {/* <span className=\"text-zinc-300\">J</span>           <span className=\"text-zinc-500\">M</span> */}         </Link>                  {/* desktop view */}         <div className=\"flex items-center space-x-6\">           <Link href=\"#about\" className=\"text-zinc-400 hover:text-zinc-100 transition-colors\">             <span className=\"hidden sm:inline\">About</span>           </Link>           <Link href=\"#projects\" className=\"text-zinc-400 hover:text-zinc-100 transition-colors\">             <span className=\"hidden sm:inline\">Projects</span>           </Link>           <Link href=\"#skills\" className=\"text-zinc-400 hover:text-zinc-100 transition-colors\">             <span className=\"hidden sm:inline\">Skills</span>           </Link>           <div className=\"flex items-center space-x-3\">             <Link               href=\"https://mail.google.com/mail/?view=cm&fs=1&to=jeevithanmahenthran@gmail.com\"               target=\"_blank\"               rel=\"noopener noreferrer\"             >               <Button                 variant=\"outline\"                 className=\"border-zinc-700 bg-zinc-800/50 text-zinc-400 hover:bg-zinc-800 hover:text-zinc-300 hover:border-zinc-600 transition-all cursor-pointer\"               >                 <Mail className=\"h-4 w-4\" />                 <span className=\"hidden sm:inline\">Contact</span>               </Button>             </Link>             <Link href=\"/docs/resume_spring2025.pdf\" target=\"_blank\" rel=\"noopener noreferrer\">               <Button className=\"bg-zinc-700 hover:bg-zinc-600 text-zinc-100 transition-all cursor-pointer\">                 <FileText className=\"h-4 w-4\" />                 <span className=\"hidden sm:inline\">Resume</span>                </Button>             </Link>             {/* mobile view (hamburger toggle) */}             <button               className=\"sm:hidden text-zinc-300\"               onClick={() => setMenuOpen(!menuOpen)}             >               {menuOpen ? <X className=\"h-6 w-6\" /> : <Menu className=\"h-6 w-6\" />}             </button>           </div>         </div>       </div>        {/* drop down menu */}       {menuOpen && (         <div className=\"sm:hidden px-4 pb-4\">           <div className=\"flex flex-col space-y-2\">             <Link href=\"#about\" className=\"text-zinc-400 hover:text-zinc-100 transition-colors\">               About             </Link>             <Link href=\"#projects\" className=\"text-zinc-400 hover:text-zinc-100 transition-colors\">               Projects             </Link>             <Link href=\"#skills\" className=\"text-zinc-400 hover:text-zinc-100 transition-colors\">               Skills             </Link>           </div>         </div>       )}      </header>   ); };  export default Navbar;"
  },
  {
    "id": 10,
    "path": "frontend/src/components/projects/cards.tsx",
    "contents": "\"use client\"  import type React from \"react\"  import { Github, ExternalLink } from \"lucide-react\" import Link from \"next/link\" import Image from \"next/image\" import { Button } from \"@/components/ui/button\" import type { Project } from \"@/lib/projectTypes\"  interface ProjectCardProps {   project: Project   onOpenLightbox: (mediaIndex: number) => void }  const ProjectCard: React.FC<ProjectCardProps> = ({ project, onOpenLightbox }) => {   const firstMedia = project.media[0]    // thumbnail render based on media type   const renderThumbnail = () => {     if (firstMedia.type === \"video\") {       return (         <div className=\"h-full w-full bg-zinc-800 flex items-center justify-center relative\">           <div className=\"absolute inset-0 opacity-50\"></div>           <svg className=\"w-16 h-16 text-red-600 z-10\" viewBox=\"0 0 24 24\" fill=\"currentColor\">             <path d=\"M19.615 3.184c-3.604-.246-11.631-.245-15.23 0-3.897.266-4.356 2.62-4.385 8.816.029 6.185.484 8.549 4.385 8.816 3.6.245 11.626.246 15.23 0 3.897-.266 4.356-2.62 4.385-8.816-.029-6.185-.484-8.549-4.385-8.816zm-10.615 12.816v-8l8 3.993-8 4.007z\" />           </svg>           <span className=\"absolute bottom-2 right-2 bg-black bg-opacity-75 text-white text-xs px-2 py-1 rounded\">             Video           </span>         </div>       )     } else {       return (         <div className=\"h-full w-full bg-zinc-800 flex items-end justify-center relative\">           <Image             src={firstMedia.src}             alt={firstMedia.alt}             fill             className=\"object-cover object-top transition-transform duration-300 group-hover:scale-105\"           />           <span className=\"absolute bottom-2 right-2 bg-black bg-opacity-75 text-white text-xs px-2 py-1 rounded\">             Image           </span>         </div>       )     }   }    return (     // showcase first image if image mediaType, or youtube emblem     <div className=\"bg-zinc-800/50 border border-zinc-700 rounded-lg overflow-hidden\">       <div className=\"relative h-48 w-full cursor-pointer group\" onClick={() => onOpenLightbox(0)}>         {renderThumbnail()}         <div className=\"absolute inset-0 bg-opacity-0 group-hover:bg-opacity-30 transition-all duration-300 flex items-center justify-center \">           <span className=\"text-white opacity-0 group-hover:opacity-100 transition-opacity duration-300 bg-black bg-opacity-50 px-3 py-1 rounded-md text-sm mt-[80px]\">             View {project.media.length} Items           </span>         </div>       </div>       <div className=\"p-6\">         <h3 className=\"text-2xl font-semibold mb-2 text-zinc-300\">{project.title}</h3>         <p className=\"text-zinc-400 mb-4\">{project.description}</p>         <div className=\"mb-4\">           <div className=\"flex flex-wrap gap-2\">             {project.technologies.map((tech, techIndex) => (               <span key={techIndex} className=\"text-xs bg-zinc-700 text-zinc-300 px-2 py-1 rounded\">                 {tech}               </span>             ))}           </div>         </div>         <div className=\"flex space-x-3\">           {project.githubLink && project.githubLink !== \"N/A\" ? (             <Link href={project.githubLink} target=\"_blank\" rel=\"noopener noreferrer\">               <Button                 variant=\"outline\"                 className=\"border-zinc-700 text-zinc-300 bg-black hover:bg-zinc-700\"                 style={{ cursor: \"pointer\" }}               >                 <Github className=\"h-4 w-4 mr-2\" />                 Code               </Button>             </Link>           ) : (             <Button               variant=\"outline\"               className=\"border-zinc-700 text-zinc-500 bg-black opacity-50 cursor-not-allowed\"               disabled             >               <Github className=\"h-4 w-4 mr-2\" />               Code             </Button>           )}            {project.demoLink && project.demoLink !== \"N/A\" ? (             <Link href={project.demoLink} target=\"_blank\" rel=\"noopener noreferrer\">               <Button                 variant=\"outline\"                 className=\"border-zinc-700 text-zinc-300 bg-black hover:bg-zinc-700\"                 style={{ cursor: \"pointer\" }}               >                 <ExternalLink className=\"h-4 w-4 mr-2\" />                 Demo               </Button>             </Link>           ) : (             <Button               variant=\"outline\"               className=\"border-zinc-700 text-zinc-500 bg-black opacity-50 cursor-not-allowed\"               disabled             >               <ExternalLink className=\"h-4 w-4 mr-2\" />               Demo             </Button>           )}         </div>       </div>     </div>   ) }  export default ProjectCard  "
  },
  {
    "id": 11,
    "path": "frontend/src/components/projects/lightbox.tsx",
    "contents": "/* eslint-disable @next/next/no-img-element */ \"use client\"  import type React from \"react\"  import { useState, useRef, useEffect } from \"react\" import { X, ChevronLeft, ChevronRight } from \"lucide-react\" import { Button } from \"@/components/ui/button\" import type { Project } from \"@/lib/projectTypes\" import YouTubeEmbed from \"./youtube\"  interface ProjectLightboxProps {   isOpen: boolean   onClose: () => void   project: Project   initialMediaIndex?: number }  const ProjectLightbox: React.FC<ProjectLightboxProps> = ({ isOpen, onClose, project, initialMediaIndex = 0 }) => {   const [currentMediaIndex, setCurrentMediaIndex] = useState(initialMediaIndex)   const modalRef = useRef<HTMLDivElement>(null)    useEffect(() => {     setCurrentMediaIndex(initialMediaIndex)   }, [initialMediaIndex, project])    // close with clicking outside the content   useEffect(() => {     const handleClickOutside = (event: MouseEvent) => {       if (modalRef.current && !modalRef.current.contains(event.target as Node)) {         onClose()       }     }      // close lightbox when pressing Esc key     const handleEscKey = (event: KeyboardEvent) => {       if (event.key === \"Escape\") {         onClose()       }     }      if (isOpen) {       document.addEventListener(\"mousedown\", handleClickOutside)       document.addEventListener(\"keydown\", handleEscKey)       // prevent scrolling when lightbox is open       document.body.style.overflow = \"hidden\"     }      return () => {       document.removeEventListener(\"mousedown\", handleClickOutside)       document.removeEventListener(\"keydown\", handleEscKey)       // restore scrolling when lightbox is closed       document.body.style.overflow = \"\"     }   }, [isOpen, onClose])    if (!isOpen || !project) return null    const currentMedia = project.media[currentMediaIndex]    const nextMedia = (e: React.MouseEvent) => {     e.stopPropagation()     if (currentMediaIndex < project.media.length - 1) {       setCurrentMediaIndex(currentMediaIndex + 1)     } else {       setCurrentMediaIndex(0) // loop back to the first media     }   }    const prevMedia = (e: React.MouseEvent) => {     e.stopPropagation()     if (currentMediaIndex > 0) {       setCurrentMediaIndex(currentMediaIndex - 1)     } else {       setCurrentMediaIndex(project.media.length - 1)      }   }    // render based off media type   const renderMediaContent = () => {     if (currentMedia.type === \"video\") {       return (         <div className=\"w-full max-w-4xl\">           <YouTubeEmbed src={currentMedia.src} title={currentMedia.alt} className=\"aspect-video\" />         </div>       )     } else {       return (         <img           src={currentMedia.src}           alt={currentMedia.alt}           className=\"max-w-full max-h-[75vh] object-contain\"           style={{ margin: \"auto\" }}         />       )     }   }    return (     <div className=\"fixed inset-0 bg-black bg-opacity-90 z-50 flex items-center justify-center p-4\" onClick={onClose}>       <div ref={modalRef} className=\"relative max-w-6xl w-full flex flex-col\" onClick={(e) => e.stopPropagation()}>         <div className=\"bg-zinc-800 p-2 rounded-t-lg flex justify-between items-center\">           <h3 className=\"text-zinc-200 font-medium px-2\">             {project.title} - {currentMediaIndex + 1} of {project.media.length}           </h3>           <Button             variant=\"ghost\"             size=\"icon\"             onClick={onClose}             className=\"text-zinc-400 hover:text-zinc-100 hover:bg-zinc-700 rounded-full\"             aria-label=\"Close lightbox\"             style={{ cursor: \"pointer\" }}           >             <X className=\"h-5 w-5\" />           </Button>         </div>          <div className=\"bg-zinc-900 rounded-b-lg p-4 flex items-center justify-center relative\">           {renderMediaContent()}            {/* navigation arrows (only show if there are multiple media items) */}           {project.media.length > 1 && (             <>               <Button                 variant=\"outline\"                 size=\"icon\"                 className=\"absolute left-4 top-1/2 -translate-y-1/2 rounded-full border-zinc-700 bg-zinc-800/80 hover:bg-zinc-700 z-10\"                 onClick={prevMedia}                 style={{ cursor: \"pointer\" }}               >                 <ChevronLeft className=\"h-6 w-6\" />                 <span className=\"sr-only\">Previous media</span>               </Button>               <Button                 variant=\"outline\"                 size=\"icon\"                 className=\"absolute right-4 top-1/2 -translate-y-1/2 rounded-full border-zinc-700 bg-zinc-800/80 hover:bg-zinc-700 z-10\"                 onClick={nextMedia}                 style={{ cursor: \"pointer\" }}               >                 <ChevronRight className=\"h-6 w-6\" />                 <span className=\"sr-only\">Next media</span>               </Button>             </>           )}         </div>          {/* thumbnail navigation */}         {project.media.length > 1 && (           <div className=\"bg-zinc-800 p-3 mt-2 rounded-lg flex justify-center space-x-2 overflow-x-auto\">             {project.media.map((media, idx) => (               <div                 key={idx}                 className={`w-16 h-16 relative rounded overflow-hidden cursor-pointer border-2 ${                   idx === currentMediaIndex ? \"border-zinc-300\" : \"border-transparent\"                 }`}                 onClick={(e) => {                   e.stopPropagation()                   setCurrentMediaIndex(idx)                 }}               >                 {media.type === \"video\" ? (                   <div className=\"w-full h-full bg-zinc-700 flex items-center justify-center\">                     <svg className=\"w-8 h-8 text-red-600\" viewBox=\"0 0 24 24\" fill=\"currentColor\">                       <path d=\"M19.615 3.184c-3.604-.246-11.631-.245-15.23 0-3.897.266-4.356 2.62-4.385 8.816.029 6.185.484 8.549 4.385 8.816 3.6.245 11.626.246 15.23 0 3.897-.266 4.356-2.62 4.385-8.816-.029-6.185-.484-8.549-4.385-8.816zm-10.615 12.816v-8l8 3.993-8 4.007z\" />                     </svg>                   </div>                 ) : (                   <img                     src={media.src}                     alt={`Thumbnail ${idx + 1}`}                     className=\"w-full h-full object-cover\"                   />                 )}               </div>             ))}           </div>         )}       </div>     </div>   ) }  export default ProjectLightbox  "
  },
  {
    "id": 12,
    "path": "frontend/src/components/projects/navigation.tsx",
    "contents": "\"use client\"  import type React from \"react\"  import { useState } from \"react\" import { ArrowLeft, ArrowRight } from \"lucide-react\" import { Button } from \"@/components/ui/button\" import type { Project } from \"@/lib/projectTypes\" import ProjectCard from \"./cards\"  interface ProjectCarouselProps {   projects: Project[]   onOpenLightbox: (projectIndex: number, mediaIndex: number) => void }  const ProjectCarousel: React.FC<ProjectCarouselProps> = ({ projects, onOpenLightbox }) => {   const [activeProject, setActiveProject] = useState(0)    const nextProject = () => {     setActiveProject((prev) => (prev === projects.length - 1 ? 0 : prev + 1))   }    const prevProject = () => {     setActiveProject((prev) => (prev === 0 ? projects.length - 1 : prev - 1))   }    return (     <div className=\"relative\">       <div className=\"overflow-hidden\">         <div           className=\"flex transition-transform duration-500 ease-in-out\"           style={{ transform: `translateX(-${activeProject * 100}%)` }}         >           {projects.map((project, index) => (             <div key={index} className=\"w-full flex-shrink-0 px-4\">               <ProjectCard project={project} onOpenLightbox={(mediaIndex) => onOpenLightbox(index, mediaIndex)} />             </div>           ))}         </div>       </div>       <Button         variant=\"outline\"         size=\"icon\"         className=\"absolute left-0 top-1/2 -translate-y-1/2 -translate-x-1/2 rounded-full border-zinc-700 bg-zinc-800/80 hover:bg-zinc-700 z-10\"         onClick={prevProject}         style={{ cursor: \"pointer\" }}       >         <ArrowLeft className=\"h-6 w-6\" />         <span className=\"sr-only\">Previous project</span>       </Button>       <Button         variant=\"outline\"         size=\"icon\"         className=\"absolute right-0 top-1/2 -translate-y-1/2 translate-x-1/2 rounded-full border-zinc-700 bg-zinc-800/80 hover:bg-zinc-700 z-10\"         onClick={nextProject}         style={{ cursor: \"pointer\" }}       >         <ArrowRight className=\"h-6 w-6\" />         <span className=\"sr-only\">Next project</span>       </Button>       <div className=\"flex justify-center mt-6 space-x-2\">         {projects.map((_, index) => (           <button             key={index}             className={`h-2 w-2 rounded-full ${index === activeProject ? \"bg-zinc-300\" : \"bg-zinc-700\"}`}             onClick={() => setActiveProject(index)}             aria-label={`Go to project ${index + 1}`}           />         ))}       </div>     </div>   ) }  export default ProjectCarousel  "
  },
  {
    "id": 13,
    "path": "frontend/src/components/projects/projects.tsx",
    "contents": "\"use client\"  import type React from \"react\"  import { useState, useRef } from \"react\" import { cn } from \"@/lib/utils\" import type { Project } from \"@/lib/projectTypes\" import ProjectCarousel from \"./navigation\" import ProjectLightbox from \"./lightbox\"  interface ProjectsProps {   isLoaded: boolean }  const Projects: React.FC<ProjectsProps> = ({ isLoaded }) => {   const [lightboxOpen, setLightboxOpen] = useState(false)   const [currentProjectIndex, setCurrentProjectIndex] = useState(0)   const [currentMediaIndex, setCurrentMediaIndex] = useState(0)   const projectsRef = useRef<HTMLDivElement>(null)    const openLightbox = (projectIndex: number, mediaIndex = 0) => {     setCurrentProjectIndex(projectIndex)     setCurrentMediaIndex(mediaIndex)     setLightboxOpen(true)   }    const closeLightbox = () => {     setLightboxOpen(false)   }    const projects: Project[] = [     {       title: \"Falsification of Autonomous Driving Stacks\",       description:         \"Research utilizing the CARLA driving simulator running wuth WSL for conducting autonomous vehicle testing. Focused on determining which initial parameters, such as speed and distance between the ego vehicle and the driving stack, led to the most violations and crashes. Additionally, introduced ChatScene, an LLM focused on creating scenarios to generate custom Scenic scripts for running targeted safety tests.\",       technologies: [\"Python\", \"CARLA\", \"Scenic\", \"VerifAI\", \"ChatScene\"],       githubLink: \"https://github.com/Jeeevii/cse233_acc_verifai\",       demoLink: \"/docs/cse233_final_report.pdf\",       media: [         {           src: \"https://www.youtube.com/watch?v=yFxkvYchXbo\",           alt: \"Final Demo Video\",           type: \"video\",         },         {           src: \"/projects/carlaThumbnail.png\",           alt: \"Carla Violation\",           type: \"image\",         },         {           src: \"/projects/cse233Graphifier.png\",           alt: \"Visual Representation of Falsification\",           type: \"image\",         },       ],     },     {       title: \"Body and Soul\",       description:         \"A 2v2 online MOBA developed in Unity 6, where players are bound by a tether, with only the most coordinated team will achieve victory. Built with Photon for multiplayer, the game features skill-based combat and progression. My focus was on designing the upgrade system, implementing various skills, and facilitating the entire project as Scrum Master.\",       technologies: [\"Unity\", \"Photon\", \"C#\", \"Scrum Methodology\"],       githubLink: \"N/A\",       demoLink: \"https://drive.google.com/file/d/13yVBUx2IcxoUuTJVpGvCxYbKIJIukH2q/view\",       media: [         {           src: \"https://www.youtube.com/watch?v=Vz5GJUwyOkE\",           alt: \"Body & Soul Offical Trailer\",           type: \"video\",         },         { src: \"/projects/MainPhase.png\", alt: \"Main Screen\", type: \"image\" },         { src: \"/projects/CombatPhase.png\", alt: \"Combat Phase\", type: \"image\" },         { src: \"/projects/UpgradePhase.png\", alt: \"Upgrade Phase\", type: \"image\" },       ],     },     {       title: \"UCSC SlugRush Gym Tracker\",       description:         \"A full stack web app for UCSC students to track gym crowd levels. Frontend built with Next.js and Tailwind CSS, backend running on FastAPI, and a PostgresSQL database running on Supabase.\",       technologies: [\"Next.js\", \"Vercel\", \"Python\", \"FastAPI\", \"Render\", \"Supabase\", \"PostgreSQL\"],       githubLink: \"https://github.com/Jeeevii/SlugRush\",       demoLink: \"N/A\",       media: [         {           src: \"/projects/slugrush.png\",           alt: \"SlugRush Daily View\",           type: \"image\",         },         {           src: \"/projects/slugrush2.png\",           alt: \"SlugRush Weekly View\",           type: \"image\",         },       ],     },     {       title: \"Portfolio Website\",       description:         \"A fast and responsive personal portfolio website built with Next.js to showcase my work and skills\",       technologies: [\"Next.js\", \"Vercel\"],       githubLink: \"https://github.com/Jeeevii/portfolio\",       demoLink: \"https://jeevithanmahenthran.com\",       media: [         {           src: \"/projects/mobile.png\",           alt: \"Portfolio Mobile View\",           type: \"image\",         },         {           src: \"/projects/hero.png\",           alt: \"Portfolio Main Section\",           type: \"image\",         },         {           src: \"/projects/bio.png\",           alt: \"Portfolio About Me Section\",           type: \"image\",         },         {           src: \"/projects/projects.png\",           alt: \"Portfolio Projects Section\",           type: \"image\",         },         {           src: \"/projects/skills.png\",           alt: \"Portfolio Skills Section\",           type: \"image\",         },       ],     },     {       title: \"WP.GG (Riot Stats Checker)\",       description:         \"A simple full-stack project which uses Riot Game's Public API to access user data, such as win rate, champion mastery, match data, etc. Built with HTML/CSS and Express.js, with the backend hosted on Firebase. Unfortunately, the Riot Games API documentation has been updated, and our version is no longer compatible with the latest changes.\",       technologies: [\"Node.js\", \"HTML/CSS\", \"Express.js\", \"Firebase\"],       githubLink: \"https://github.com/Jeeevii/RiotStatsChecker\",       demoLink: \"https://wpgg-6f4e2.web.app/index.html\",       media: [         { src: \"/projects/wpggMain.png\", alt: \"WP.GG Main Interface\", type: \"image\" },         { src: \"/projects/wpggStats.png\", alt: \"WP.GG Stats Page\", type: \"image\" },       ],     },   ]    return (     <>       <section         id=\"projects\"         className={cn(           \"py-20 border-t border-zinc-800 scroll-m-24 opacity-0 transform translate-y-10 transition-all duration-1000 ease-out delay-700\",           isLoaded && \"opacity-100 translate-y-0\",         )}         ref={projectsRef}       >         <h2 className=\"text-3xl font-bold mb-8 text-zinc-300\">Projects</h2>         <ProjectCarousel projects={projects} onOpenLightbox={openLightbox} />       </section>        {/* lightbox component with seperate arrows and image navigiation */}       {lightboxOpen && (         <ProjectLightbox           isOpen={lightboxOpen}           onClose={closeLightbox}           project={projects[currentProjectIndex]}           initialMediaIndex={currentMediaIndex}         />       )}     </>   ) }  export default Projects  "
  },
  {
    "id": 14,
    "path": "frontend/src/components/projects/youtube.tsx",
    "contents": "\"use client\"  import type React from \"react\"  import { useState } from \"react\"  interface YouTubeEmbedProps {   src: string   title?: string   className?: string }  // helper to extract YouTube ID from YouTube URL  export const getYoutubeId = (url: string): string | null => {   // Handle different YouTube URL formats   const regExp = /^.*(youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#&?]*).*/   const match = url.match(regExp)    // Return the ID if found and valid (11 characters)   return match && match[2].length === 11 ? match[2] : null }  const YouTubeEmbed: React.FC<YouTubeEmbedProps> = ({ src, title = \"YouTube video player\", className = \"\" }) => {   const [isLoading, setIsLoading] = useState(true)   const youtubeId = getYoutubeId(src)    if (!youtubeId) {     return (       <div className={`bg-zinc-800 flex items-center justify-center p-4 ${className}`}>         <p className=\"text-zinc-400\">Invalid YouTube URL</p>       </div>     )   }    return (     <div className={`relative ${className}`} style={{ paddingBottom: isLoading ? \"56.25%\" : \"0\" }}>       {isLoading && (         <div className=\"absolute inset-0 flex items-center justify-center bg-zinc-800\">           <div className=\"animate-pulse flex flex-col items-center\">             <svg className=\"w-12 h-12 text-red-600 mb-2\" viewBox=\"0 0 24 24\" fill=\"currentColor\">               <path d=\"M19.615 3.184c-3.604-.246-11.631-.245-15.23 0-3.897.266-4.356 2.62-4.385 8.816.029 6.185.484 8.549 4.385 8.816 3.6.245 11.626.246 15.23 0 3.897-.266 4.356-2.62 4.385-8.816-.029-6.185-.484-8.549-4.385-8.816zm-10.615 12.816v-8l8 3.993-8 4.007z\" />             </svg>             <span className=\"text-zinc-400\">Loading video...</span>           </div>         </div>       )}       <iframe         className={`w-full h-full ${isLoading ? \"absolute inset-0\" : \"\"}`}         src={`https://www.youtube.com/embed/${youtubeId}`}         title={title}         allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"         allowFullScreen         onLoad={() => setIsLoading(false)}       ></iframe>     </div>   ) }  export default YouTubeEmbed  "
  },
  {
    "id": 15,
    "path": "frontend/src/components/skills.tsx",
    "contents": "/* eslint-disable @next/next/no-img-element */ \"use client\";  import { useState, useEffect } from \"react\"; import { Server, Database, PanelTop, Terminal, Gamepad, Bot } from \"lucide-react\"; import { cn } from \"@/lib/utils\";  const Skills = () => {   const [isLoaded, setIsLoaded] = useState(false);    useEffect(() => {     setIsLoaded(true);   }, []);    const skillCategories = [     {       title: \"Frontend Development\",       icon: <PanelTop className=\"h-5 w-5\" />,        skills: [\"Next.js\", \"Angular\", \"Tailwind CSS\", \"Figma\"],     },     {       title: \"Backend Development\",       icon: <Server className=\"h-5 w-5\" />,        skills: [\"Flask\", \"FastAPI\", \"Node.js\", \"C/C++\"],     },     {       title: \"Databases & Cloud\",       icon: <Database className=\"h-5 w-5\" />,        skills: [\"PostgreSQL\", \"Firebase\", \"Supabase\", \"Vercel\", \"Docker\"],     },     {       title: \"AI & ML Development\",       icon: <Bot  className=\"h-5 w-5\" />,        skills: [\"LangChain\", \"LlamaIndex\", \"CARLA\", \"Scenic\"],     },     {       title: \"Game Development\",       icon: <Gamepad className=\"h-5 w-5\" />,        skills: [\"Unity\", \"Photon\", \"C#\", \"Phaser\"],     },     {       title: \"Development & Security Tools\",       icon: <Terminal className=\"h-5 w-5\" />,        skills: [\"Git\", \"Linux\", \"Ghidra\", \"WireShark\", \"Mininet\", \"Bash\"],     },   ];    return (     <section       id=\"skills\"       className={cn(         \"py-20 border-t border-zinc-800 scroll-m-24 opacity-0 transform translate-y-10 transition-all duration-1000 ease-out delay-500\",         isLoaded && \"opacity-100 translate-y-0\",       )}     >       <h2 className=\"text-3xl font-bold mb-8 text-zinc-300\">Skills</h2>       <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">         {skillCategories.map((category, index) => (           <div             key={index}             className=\"bg-zinc-800/50 border border-zinc-700 rounded-lg p-6 hover:border-zinc-600 transition-colors\"           >             <div className=\"flex items-center mb-4\">               <div className=\"mr-2 text-zinc-400\">{category.icon}</div>               <h3 className=\"text-xl font-semibold text-zinc-300\">{category.title}</h3>             </div>             <div className=\"grid grid-cols-2 gap-3\">               {category.skills.map((skill, skillIndex) => (                 <div                   key={skillIndex}                   className=\"flex flex-col items-center bg-zinc-700/50 rounded-lg p-3 hover:bg-zinc-700 transition-colors\">                   <div className=\"w-10 h-10 flex items-center justify-center mb-2\">                     <img                        src={skill ? `/icons/${skill.toLowerCase().replace(/[^a-z0-9]/g, \"\")}.svg` : \"/globals.svg\"}                        alt={skill || \"unknown skill\"}                        className=\"w-8 h-8\"                      />                                     </div>                   <span className=\"text-sm text-zinc-300 text-center\">{skill}</span>                 </div>               ))}             </div>           </div>         ))}       </div>     </section>   ); };  export default Skills; "
  },
  {
    "id": 16,
    "path": "frontend/src/components/ui/button.tsx",
    "contents": "import * as React from \"react\" import { Slot } from \"@radix-ui/react-slot\" import { cva, type VariantProps } from \"class-variance-authority\"  import { cn } from \"@/lib/utils\"  const buttonVariants = cva(   \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",   {     variants: {       variant: {         default:           \"bg-primary text-primary-foreground shadow-xs hover:bg-primary/90\",         destructive:           \"bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",         outline:           \"border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50\",         secondary:           \"bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80\",         ghost:           \"hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50\",         link: \"text-primary underline-offset-4 hover:underline\",       },       size: {         default: \"h-9 px-4 py-2 has-[>svg]:px-3\",         sm: \"h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5\",         lg: \"h-10 rounded-md px-6 has-[>svg]:px-4\",         icon: \"size-9\",       },     },     defaultVariants: {       variant: \"default\",       size: \"default\",     },   } )  function Button({   className,   variant,   size,   asChild = false,   ...props }: React.ComponentProps<\"button\"> &   VariantProps<typeof buttonVariants> & {     asChild?: boolean   }) {   const Comp = asChild ? Slot : \"button\"    return (     <Comp       data-slot=\"button\"       className={cn(buttonVariants({ variant, size, className }))}       {...props}     />   ) }  export { Button, buttonVariants } "
  },
  {
    "id": 17,
    "path": "frontend/src/components/ui/decryptButton.jsx",
    "contents": "\"use client\"; import { useRef, useState, useEffect } from \"react\"; import { FaLaptopCode, FiLock , FiUnlock} from \"react-icons/fi\"; import { motion } from \"framer-motion\"; import Link from \"next/link\";  const TARGET_TEXT = \"View My Work\"; const CYCLES_PER_LETTER = 4; const SHUFFLE_TIME = 50; const CHARS = \"!@#$%^&*():{};|,.<>/?\";  const DecryptButton = () => {   const intervalRef = useRef(null);   const [text, setText] = useState(TARGET_TEXT);   const [decrypted, setDecrypted] = useState(false);   const [isClicked, setIsClicked] = useState(false);   const [isAnimationCompleted, setIsAnimationCompleted] = useState(false);    useEffect(() => {     setText(       TARGET_TEXT.split(\"\").map(() => CHARS[Math.floor(Math.random() * CHARS.length)]).join(\"\")     );   }, []);    useEffect(() => {     return () => clearInterval(intervalRef.current);   }, []);    const decryptText = () => {     if (decrypted) return;     setDecrypted(true);     let pos = 0;     intervalRef.current = setInterval(() => {       const decryptedText = TARGET_TEXT.split(\"\")         .map((char, index) => (pos / CYCLES_PER_LETTER > index ? char : CHARS[Math.floor(Math.random() * CHARS.length)]))         .join(\"\");       setText(decryptedText);       pos++;        if (pos >= TARGET_TEXT.length * CYCLES_PER_LETTER) {         clearInterval(intervalRef.current);         setText(TARGET_TEXT);         setIsAnimationCompleted(true);        }     }, SHUFFLE_TIME);   };    const handleClick = () => {     if (!isAnimationCompleted) return;      setIsClicked(true);      const section = document.getElementById(\"projects\");     if (section) {       section.scrollIntoView({ behavior: \"smooth\" });     }   };    return (     <motion.button       whileHover={{ scale: 1.025 }}       whileTap={{ scale: 0.975 }}       onMouseOver={decryptText}       onClick={handleClick}        className={`group relative overflow-hidden rounded-lg border-[1px] border-zinc-600 bg-zinc-700 px-4 py-2 font-mono font-medium text-zinc-300 transition-colors ${!isAnimationCompleted ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer hover:text-indigo-300'}`}       // style={{ cursor: 'pointer' }}       disabled={!isAnimationCompleted}      >       <div className=\"relative z-10 flex items-center gap-2\">       {isAnimationCompleted ? (           <FiUnlock className=\"text-zinc-300\" />         ) : (           <FiLock className=\"text-zinc-300\" />         )}         <span>{text}</span>       </div>     </motion.button>   ); };  export default DecryptButton; "
  },
  {
    "id": 18,
    "path": "frontend/src/lib/icons.tsx",
    "contents": "import {   Code,   Cpu,   Database,   Cloud,   GitBranch,   Globe,   Layers,   Settings,   Lock,   LayoutGrid, } from \"lucide-react\";  // Function to get the appropriate icon for each skill export function getIcons(skillName: string) {   // Map skill names to appropriate icons   switch (skillName.toLowerCase()) {     // Backend     case \"node.js\":       return (         <svg viewBox=\"0 0 24 24\" className=\"h-8 w-8\" fill=\"#68a063\">           <path d=\"M12 21.985c-.275 0-.532-.074-.772-.202l-2.439-1.448c-.365-.203-.182-.277-.072-.314.496-.165.588-.201 1.101-.493.056-.037.129-.02.185.017l1.87 1.12c.074.036.166.036.221 0l7.319-4.237c.074-.036.11-.11.11-.202v-8.457c0-.091-.036-.165-.11-.201l-7.319-4.219c-.073-.037-.165-.037-.221 0l-7.319 4.219c-.074.036-.11.11-.11.201v8.457c0 .092.036.166.11.202l2.001 1.157c1.082.548 1.762-.095 1.762-.735v-8.361c0-.11.091-.221.203-.221h.936c.11 0 .203.092.203.221v8.361c0 1.449-.788 2.294-2.166 2.294-.422 0-.752 0-1.688-.46l-1.925-1.099c-.478-.276-.772-.789-.772-1.339v-8.457c0-.55.294-1.063.772-1.339l7.319-4.237c.467-.258 1.095-.258 1.541 0l7.319 4.237c.477.276.772.789.772 1.339v8.457c0 .55-.295 1.063-.772 1.339l-7.319 4.237c-.24.128-.497.202-.771.202z\" />         </svg>       );     case \"express\":       return <Code className=\"h-8 w-8 text-zinc-300\" />;     case \"python\":       return (         <svg viewBox=\"0 0 24 24\" className=\"h-8 w-8\" fill=\"#3776ab\">           <path d=\"M14.31.18l.9.2.73.26.59.3.45.32.34.34.25.34.16.33.1.3.04.26.02.2-.01.13V8.5l-.05.63-.13.55-.21.46-.26.38-.3.31-.33.25-.35.19-.35.14-.33.1-.3.07-.26.04-.21.02H8.83l-.69.05-.59.14-.5.22-.41.27-.33.32-.27.35-.2.36-.15.37-.1.35-.07.32-.04.27-.02.21v3.06H3.23l-.21-.03-.28-.07-.32-.12-.35-.18-.36-.26-.36-.36-.35-.46-.32-.59-.28-.73-.21-.88-.14-1.05L0 11.97l.06-1.22.16-1.04.24-.87.32-.71.36-.57.4-.44.42-.33.42-.24.4-.16.36-.1.32-.05.24-.01h.16l.06.01h8.16v-.83H6.24l-.01-2.75-.02-.37.05-.34.11-.31.17-.28.25-.26.31-.23.38-.2.44-.18.51-.15.58-.12.64-.1.71-.06.77-.04.84-.02 1.27.05 1.07.13zm-6.3 1.98l-.23.33-.08.41.08.41.23.34.33.22.41.09.41-.09.33-.22.23-.34.08-.41-.08-.41-.23-.33-.33-.22-.41-.09-.41.09zm13.09 3.95l.28.06.32.12.35.18.36.27.36.35.35.47.32.59.28.73.21.88.14 1.04.05 1.23-.06 1.23-.16 1.04-.24.86-.32.71-.36.57-.4.45-.42.33-.42.24-.4.16-.36.09-.32.05-.24.02-.16-.01h-8.22v.82h5.84l.01 2.76.02.36-.05.34-.11.31-.17.29-.25.25-.31.24-.38.2-.44.17-.51.15-.58.13-.64.09-.71.07-.77.04-.84.01-1.27-.04-1.07-.14-.9-.2-.73-.25-.59-.3-.45-.33-.34-.34-.25-.34-.16-.33-.1-.3-.04-.25-.02-.2.01-.13v-5.34l.05-.64.13-.54.21-.46.26-.38.3-.32.33-.24.35-.2.35-.14.33-.1.3-.06.26-.04.21-.02.13-.01h5.84l.69-.05.59-.14.5-.21.41-.28.33-.32.27-.35.2-.36.15-.36.1-.35.07-.32.04-.28.02-.21V6.07h2.09l.14.01zm-6.47 14.25l-.23.33-.08.41.08.41.23.33.33.23.41.08.41-.08.33-.23.23-.33.08-.41-.08-.41-.23-.33-.33-.23-.41-.08-.41.08z\" />         </svg>       );     case \"django\":       return <Code className=\"h-8 w-8 text-zinc-300\" />;     case \"java\":       return <Cpu className=\"h-8 w-8 text-zinc-300\" />;     case \"spring boot\":       return <Cpu className=\"h-8 w-8 text-zinc-300\" />;      // Databases     case \"postgresql\":       return <Database className=\"h-8 w-8 text-zinc-300\" />;     case \"mongodb\":       return <Database className=\"h-8 w-8 text-zinc-300\" />;     case \"mysql\":       return <Database className=\"h-8 w-8 text-zinc-300\" />;     case \"redis\":       return <Database className=\"h-8 w-8 text-zinc-300\" />;     case \"elasticsearch\":       return <Database className=\"h-8 w-8 text-zinc-300\" />;      // DevOps & Cloud     case \"docker\":       return (         <svg viewBox=\"0 0 24 24\" className=\"h-8 w-8\" fill=\"#2496ED\">           <path d=\"M13.983 11.078h2.119a.186.186 0 00.186-.185V9.006a.186.186 0 00-.186-.186h-2.119a.185.185 0 00-.185.185v1.888c0 .102.083.185.185.185m-2.954-5.43h2.118a.186.186 0 00.186-.186V3.574a.186.186 0 00-.186-.185h-2.118a.185.185 0 00-.185.185v1.888c0 .102.082.185.185.185m0 2.716h2.118a.187.187 0 00.186-.186V6.29a.186.186 0 00-.186-.185h-2.118a.185.185 0 00-.185.185v1.887c0 .102.082.185.185.186m-2.93 0h2.12a.186.186 0 00.184-.186V6.29a.185.185 0 00-.185-.185H8.1a.185.185 0 00-.185.185v1.887c0 .102.083.185.185.186m-2.964 0h2.119a.186.186 0 00.185-.186V6.29a.185.185 0 00-.185-.185H5.136a.186.186 0 00-.186.185v1.887c0 .102.084.185.186.186m5.893 2.715h2.118a.186.186 0 00.186-.185V9.006a.186.186 0 00-.186-.186h-2.118a.185.185 0 00-.185.185v1.888c0 .102.082.185.185.185m-2.93 0h2.12a.185.185 0 00.184-.185V9.006a.185.185 0 00-.184-.186h-2.12a.185.185 0 00-.184.185v1.888c0 .102.083.185.185.185m-2.964 0h2.119a.185.185 0 00.185-.185V9.006a.185.185 0 00-.184-.186h-2.12a.186.186 0 00-.186.186v1.887c0 .102.084.185.186.185m-2.92 0h2.12a.185.185 0 00.184-.185V9.006a.185.185 0 00-.184-.186h-2.12a.185.185 0 00-.184.185v1.888c0 .102.082.185.185.185M23.763 9.89c-.065-.051-.672-.51-1.954-.51-.338.001-.676.03-1.01.087-.248-1.7-1.653-2.53-1.716-2.566l-.344-.199-.226.327c-.284.438-.49.922-.612 1.43-.23.97-.09 1.882.403 2.661-.595.332-1.55.413-1.744.42H.751a.751.751 0 00-.75.748 11.376 11.376 0 00.692 4.062c.545 1.428 1.355 2.48 2.41 3.124 1.18.723 3.1 1.137 5.275 1.137.983.003 1.963-.086 2.93-.266a12.248 12.248 0 003.823-1.389c.98-.567 1.86-1.288 2.61-2.136 1.252-1.418 1.998-2.997 2.553-4.4h.221c1.372 0 2.215-.549 2.68-1.009.309-.293.55-.65.707-1.046l.098-.288Z\" />         </svg>       );     case \"kubernetes\":       return <Cloud className=\"h-8 w-8 text-zinc-300\" />;     case \"aws\":       return <Cloud className=\"h-8 w-8 text-zinc-300\" />;     case \"ci/cd\":       return <GitBranch className=\"h-8 w-8 text-zinc-300\" />;     case \"terraform\":       return <Cloud className=\"h-8 w-8 text-zinc-300\" />;      // Frontend     case \"react\":       return (         <svg viewBox=\"0 0 24 24\" className=\"h-8 w-8\" fill=\"#61DAFB\">           <path d=\"M14.23 12.004a2.236 2.236 0 0 1-2.235 2.236 2.236 2.236 0 0 1-2.236-2.236 2.236 2.236 0 0 1 2.235-2.236 2.236 2.236 0 0 1 2.236 2.236zm2.648-10.69c-1.346 0-3.107.96-4.888 2.622-1.78-1.653-3.542-2.602-4.887-2.602-.41 0-.783.093-1.106.278-1.375.793-1.683 3.264-.973 6.365C1.98 8.917 0 10.42 0 12.004c0 1.59 1.99 3.097 5.043 4.03-.704 3.113-.39 5.588.988 6.38.32.187.69.275 1.102.275 1.345 0 3.107-.96 4.888-2.624 1.78 1.654 3.542 2.603 4.887 2.603.41 0 .783-.09 1.106-.275 1.374-.792 1.683-3.263.973-6.365C22.02 15.096 24 13.59 24 12.004c0-1.59-1.99-3.097-5.043-4.032.704-3.11.39-5.587-.988-6.38-.318-.184-.688-.277-1.092-.278zm-.005 1.09v.006c.225 0 .406.044.558.127.666.382.955 1.835.73 3.704-.054.46-.142.945-.25 1.44-.96-.236-2.006-.417-3.107-.534-.66-.905-1.345-1.727-2.035-2.447 1.592-1.48 3.087-2.292 4.105-2.295zm-9.77.02c1.012 0 2.514.808 4.11 2.28-.686.72-1.37 1.537-2.02 2.442-1.107.117-2.154.298-3.113.538-.112-.49-.195-.964-.254-1.42-.23-1.868.054-3.32.714-3.707.19-.09.4-.127.563-.132zm4.882 3.05c.455.468.91.992 1.36 1.564-.44-.02-.89-.034-1.345-.034-.46 0-.915.01-1.36.034.44-.572.895-1.096 1.345-1.565zM12 8.1c.74 0 1.477.034 2.202.093.406.582.802 1.203 1.183 1.86.372.64.71 1.29 1.018 1.946-.308.655-.646 1.31-1.013 1.95-.38.66-.773 1.288-1.18 1.87-.728.063-1.466.098-2.21.098-.74 0-1.477-.035-2.202-.093-.406-.582-.802-1.204-1.183-1.86-.372-.64-.71-1.29-1.018-1.946.303-.657.646-1.313 1.013-1.954.38-.66.773-1.286 1.18-1.868.728-.064 1.466-.098 2.21-.098zm-3.635.254c-.24.377-.48.763-.704 1.16-.225.39-.435.782-.635 1.174-.265-.656-.49-1.31-.676-1.947.64-.15 1.315-.283 2.015-.386zm7.26 0c.695.103 1.365.23 2.006.387-.18.632-.405 1.282-.66 1.933-.2-.39-.41-.783-.64-1.174-.225-.392-.465-.774-.705-1.146zm3.063.675c.484.15.944.317 1.375.498 1.732.74 2.852 1.708 2.852 2.476-.005.768-1.125 1.74-2.857 2.475-.42.18-.88.342-1.355.493-.28-.958-.646-1.956-1.1-2.98.45-1.017.81-2.01 1.085-2.964zm-13.395.004c.278.96.645 1.957 1.1 2.98-.45 1.017-.812 2.01-1.086 2.964-.484-.15-.944-.318-1.37-.5-1.732-.737-2.852-1.706-2.852-2.474 0-.768 1.12-1.742 2.852-2.476.42-.18.88-.342 1.356-.494zm11.678 4.28c.265.657.49 1.312.676 1.948-.64.157-1.316.29-2.016.39.24-.375.48-.762.705-1.158.225-.39.435-.788.636-1.18zm-9.945.02c.2.392.41.783.64 1.175.23.39.465.772.705 1.143-.695-.102-1.365-.23-2.006-.386.18-.63.406-1.282.66-1.933zM17.92 16.32c.112.493.2.968.254 1.423.23 1.868-.054 3.32-.714 3.708-.147.09-.338.128-.563.128-1.012 0-2.514-.807-4.11-2.28.686-.72 1.37-1.536 2.02-2.44 1.107-.118 2.154-.3 3.113-.54zm-11.83.01c.96.234 2.006.415 3.107.532.66.905 1.345 1.727 2.035 2.446-1.595 1.483-3.092 2.295-4.11 2.295-.22-.005-.406-.05-.553-.132-.666-.38-.955-1.834-.73-3.703.054-.46.142-.944.25-1.438zm4.56.64c.44.02.89.034 1.345.034.46 0 .915-.01 1.36-.034-.44.572-.895 1.095-1.345 1.565-.455-.47-.91-.993-1.36-1.565z\" />         </svg>       );     case \"typescript\":       return <Code className=\"h-8 w-8 text-zinc-300\" />;     case \"html/css\":       return <LayoutGrid className=\"h-8 w-8 text-zinc-300\" />;     case \"next.js\":       return <Code className=\"h-8 w-8 text-zinc-300\" />;     case \"tailwind css\":       return <LayoutGrid className=\"h-8 w-8 text-zinc-300\" />;      // Tools & Methods     case \"git\":       return <GitBranch className=\"h-8 w-8 text-zinc-300\" />;     case \"restful apis\":       return <Globe className=\"h-8 w-8 text-zinc-300\" />;     case \"graphql\":       return <Globe className=\"h-8 w-8 text-zinc-300\" />;     case \"microservices\":       return <Layers className=\"h-8 w-8 text-zinc-300\" />;     case \"agile\":       return <Code className=\"h-8 w-8 text-zinc-300\" />;      // Other     case \"system design\":       return <Layers className=\"h-8 w-8 text-zinc-300\" />;     case \"performance\":     case \"performance optimization\":       return <Settings className=\"h-8 w-8 text-zinc-300\" />;     case \"security\":       return <Lock className=\"h-8 w-8 text-zinc-300\" />;     case \"testing\":       return <Code className=\"h-8 w-8 text-zinc-300\" />;      // Default fallback     default:       return <Code className=\"h-8 w-8 text-zinc-300\" />;   } }"
  },
  {
    "id": 19,
    "path": "frontend/src/lib/projectTypes.ts",
    "contents": "export type MediaType = \"image\" | \"video\"  export interface ProjectMedia {   src: string   alt: string   type: MediaType }  export interface Project {   title: string   description: string   technologies: string[]   githubLink: string   demoLink?: string   media: ProjectMedia[] }  "
  },
  {
    "id": 20,
    "path": "frontend/src/lib/utils.ts",
    "contents": "import { clsx, type ClassValue } from \"clsx\" import { twMerge } from \"tailwind-merge\"  export function cn(...inputs: ClassValue[]) {   return twMerge(clsx(inputs)) } "
  }
]