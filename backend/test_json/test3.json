[
  {
    "id": 1,
    "path": "backend/app.py",
    "contents": "from flask import Flask, jsonify, request from flask_cors import CORS from connect4 import * app = Flask(__name__) cors = CORS(app, origins=\"*\")   @app.route('/api/board', methods=['GET']) def board():     return jsonify(         {             'status': 200,             'board': game.board.board         }     )   @app.route('/api/reset', methods=['GET']) def reset():     game.reset()     return jsonify(         {             'status': 200,             'board': game.board.board,             'turn': game.turn,         }     )   @app.route('/api/move', methods=['POST']) def move():     data = request.get_json()     column = data.get('column')     playerID = data.get('playerID')     status = game.move(column, playerID)     return jsonify(         {             'status': status,             'board': game.board.board,             'turn': game.turn,             'column': data.get('column'),             'winner': game.winner,         }     )   if __name__ == '__main__':     game = Game()     print(\"Game started\")     app.run(debug=True, port=8080) "
  },
  {
    "id": 2,
    "path": "backend/connect4.py",
    "contents": "import random   class Game:     def __init__(self):         self.board = ConnectFour()         self.mode = None         self.turn = 0         self.moves = []         self.winner = -1      def reset(self):         self.board.reset()         self.turn = 0         self.moves = []         self.winner = -1      def move(self, col, playerID):         # check if playerID matches turn         if self.winner != -1:             return 400         if playerID != self.turn:             return 400         # make the move         if self.board.move(col, playerID) == True:             self.moves.append([col, playerID])             self.turn += 1             self.turn %= 2             # check for a winner             winner = self.board.check_winner()             if winner == 1:                 self.winner = playerID             elif winner == 2:                 self.winner = 2             return 200         else:             return 403   class ConnectFour:     def __init__(self):         self.board = [[-1 for _ in range(7)] for _ in range(6)]      def reset(self):         self.board = [[-1 for _ in range(7)] for _ in range(6)]      def get_board(self):         return self.board      def available_moves(self):         moves = []         for col in range(7):             if self.board[0][col] == -1:                 moves.append(col)         return moves      def move(self, col, player):         # check if the column is full         if self.board[0][col] != -1:             return False         # find the lowest empty cell in the column         row = 0         while row < 6 and self.board[row][col] == -1:             row += 1         # make the move         self.board[row-1][col] = player         return True      def check_winner(self):         # check rows         for row in range(6):             for col in range(4):                 if self.board[row][col] == self.board[row][col+1] == self.board[row][col+2] == self.board[row][col+3] != -1:                     return 1         # check columns         for col in range(7):             for row in range(3):                 if self.board[row][col] == self.board[row+1][col] == self.board[row+2][col] == self.board[row+3][col] != -1:                     return 1         # check diagonals         for row in range(3):             for col in range(4):                 if self.board[row][col] == self.board[row+1][col+1] == self.board[row+2][col+2] == self.board[row+3][col+3] != -1:                     return 1         for row in range(3):             for col in range(3, 7):                 if self.board[row][col] == self.board[row+1][col-1] == self.board[row+2][col-2] == self.board[row+3][col-3] != -1:                     return 1         # check for a draw         count = 0         for row in range(6):             for col in range(7):                 if self.board[row][col] != -1:                     count = 1                     break         if count == 0:             return 2         return 0 "
  },
  {
    "id": 3,
    "path": "frontend/index.html",
    "contents": "<!doctype html> <html lang=\"en\">   <head>     <meta charset=\"UTF-8\" />     <link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" />     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />     <title>Vite + React</title>   </head>   <body>     <div id=\"root\"></div>     <script type=\"module\" src=\"/src/main.jsx\"></script>   </body> </html> "
  },
  {
    "id": 4,
    "path": "frontend/src/App.jsx",
    "contents": "import {BrowserRouter as Router, Routes, Route} from \"react-router-dom\"; import Game from \"./pages/Game\";  function App() {   return (     <Router>       <Routes>         <Route path=\"/\" element={<Game />} />       </Routes>     </Router>   ); }  export default App; "
  },
  {
    "id": 5,
    "path": "frontend/src/main.jsx",
    "contents": "import React from \"react\"; import ReactDOM from \"react-dom/client\"; import App from \"./App.jsx\"; import \"./index.css\";  ReactDOM.createRoot(document.getElementById(\"root\")).render(   <React.StrictMode>     <App />   </React.StrictMode> ); "
  },
  {
    "id": 6,
    "path": "frontend/src/pages/Game.jsx",
    "contents": "import {useState, useEffect} from \"react\"; import axios from \"axios\"; import styles from \"./Game.module.css\"; // Importing the CSS module  const Game = () => {   const [board, setBoard] = useState([]);   const [turn, setTurn] = useState(0);   const [winner, setWinner] = useState(-1);   const cellColor = (value) => {     switch (value) {       case 0:         return styles.cellBlue;       case 1:         return styles.cellRed;       default:         return \"\";     }   };    useEffect(() => {     axios.get(\"http://localhost:8080/api/board\").then((response) => {       setBoard(response.data.board);     });   }, []);    async function move(column) {     try {       const response = await axios.post(\"http://localhost:8080/api/move\", {         column: column,         playerID: turn,       });       setBoard(response.data.board);       setTurn(response.data.turn);       setWinner(response.data.winner);     } catch (error) {       console.error(error);     }   }    async function reset() {     await axios.get(\"http://localhost:8080/api/reset\").then((response) => {       setBoard(response.data.board);       setTurn(response.data.turn);       setWinner(-1);     });   }    return (     <>       <div>         <div className={styles.container}>           <h1>Connect 4</h1>           <h2>Player {turn + 1}&apos;s turn</h2>           <table>             <tbody>               {board.map((row, rowIndex) => (                 <tr key={rowIndex}>                   {row.map((cell, columnIndex) => (                     <td                       key={columnIndex}                       className={`${styles.cell} ${cellColor(cell)}`}                       onClick={() => move(columnIndex)}                     ></td>                   ))}                 </tr>               ))}             </tbody>           </table>           {winner !== -1 && <h2>Player {winner + 1} wins!</h2>}           <button className={styles.reset} onClick={reset}>             Reset           </button>         </div>       </div>     </>   ); };  export default Game; "
  },
  {
    "id": 7,
    "path": "frontend/vite.config.js",
    "contents": "import {defineConfig} from \"vite\"; import react from \"@vitejs/plugin-react\";  // https://vitejs.dev/config/ export default defineConfig({   plugins: [react()], }); "
  }
]