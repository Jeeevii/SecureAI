"use client"

import { useState } from "react"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Copy, ChevronDown, ChevronUp, FileWarning, FileX, FileQuestion } from "lucide-react"
import { useToast } from "@/hooks/use-toast"

export interface MalwareScanTableProps {
  id: number
  fileName: string
  category: string
  description: string
  sha256: string
  classificationReason: string
}

const getMalwareData = () => {
  try {
    const data = sessionStorage.getItem("malware")
    if (!data) return []
    const parsedData = JSON.parse(data)
    // Handle different possible data structures
    if (Array.isArray(parsedData)) {
      return parsedData
    } else if (parsedData && Array.isArray(parsedData.malware)) {
      return parsedData.malware
    } else if (parsedData && typeof parsedData === 'object') {
      // Convert object to array if it's not already an array
      return Object.values(parsedData).filter(item => item !== null && typeof item === 'object')
    }
    return []
  } catch (error) {
    console.error("Error parsing malware data:", error)
    return []
  }
}

export function MalwareScanTable() {
  const [expandedRows, setExpandedRows] = useState<number[]>([])
  const [malwareData, setMalwareData] = useState<MalwareScanTableProps[]>(() => getMalwareData())
  const { toast } = useToast()

  const toggleRow = (id: number) => {
    setExpandedRows((prev) => (prev.includes(id) ? prev.filter((rowId) => rowId !== id) : [...prev, id]))
  }

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text)
    toast({
      title: "Copied to clipboard",
      description: "The hash has been copied to your clipboard",
    })
  }

  const getCategoryIcon = (category: string) => {
    switch (category) {
      case "malicious":
        return <FileX className="h-5 w-5 text-red-500" />
      case "suspicious":
        return <FileWarning className="h-5 w-5 text-yellow-500" />
      default:
        return <FileQuestion className="h-5 w-5 text-blue-500" />
    }
  }

  const getCategoryClass = (category: string) => {
    switch (category) {
      case "malicious":
        return "bg-red-50 text-red-700 border-red-100"
      case "suspicious":
        return "bg-yellow-50 text-yellow-700 border-yellow-100"
      case "safe":
        return "bg-blue-50 text-blue-700 border-blue-100"
      case "unknown":
        return "bg-blue-50 text-blue-700 border-blue-100"
      default:
        return "bg-gray-50 text-gray-700 border-gray-100"
    }
  }

  // Display empty state when no malware data
  if (!malwareData || malwareData.length === 0) {
    return (
      <div className="rounded-md border border-gray-200 p-8 text-center">
        <FileQuestion className="h-12 w-12 mx-auto mb-4 text-gray-400" />
        <h3 className="text-lg font-medium text-gray-900 mb-1">No malware detected</h3>
        <p className="text-gray-500">The repository scan did not identify any malicious files.</p>
      </div>
    );
  }

  return (
    <div className="rounded-md border border-gray-200 overflow-hidden shadow-sm">
      <Table>
        <TableHeader className="bg-gray-50">
          <TableRow className="hover:bg-gray-100 border-gray-200">
            <TableHead className="w-[50px]"></TableHead>
            <TableHead className="text-black">File</TableHead>
            <TableHead className="text-black">Category</TableHead>
            <TableHead className="text-black">Description</TableHead>
            <TableHead className="text-black w-[100px]">Actions</TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          {Array.isArray(malwareData) && malwareData.map((item: MalwareScanTableProps, index: number) => (
            <>
              <TableRow
                key={item.id || index}
                className={`hover:bg-gray-50 border-gray-200 cursor-pointer ${
                  expandedRows.includes(item.id || index) ? "bg-gray-50" : ""
                }`}
                onClick={() => toggleRow(item.id || index)}
              >
                <TableCell>
                  {expandedRows.includes(item.id || index) ? (
                    <ChevronUp className="h-4 w-4 text-gray-400" />
                  ) : (
                    <ChevronDown className="h-4 w-4 text-gray-400" />
                  )}
                </TableCell>
                <TableCell className="font-medium text-gray-900">{item.fileName}</TableCell>
                <TableCell>
                  <div className="flex items-center gap-2">
                    {getCategoryIcon(item.category)}
                    <Badge className={`${getCategoryClass(item.category)}`}>{item.category}</Badge>
                  </div>
                </TableCell>
                <TableCell className="text-gray-700">{item.description}</TableCell>
                <TableCell>
                  <Button
                    variant="ghost"
                    size="sm"
                    className="h-8 w-8 p-0"
                    onClick={(e: React.MouseEvent<HTMLButtonElement>) => {
                      e.stopPropagation()
                      copyToClipboard(item.sha256)
                    }}
                  >
                    <span className="sr-only">Copy hash</span>
                    <Copy className="h-4 w-4" />
                  </Button>
                </TableCell>
              </TableRow>
              {expandedRows.includes(item.id || index) && (
                <TableRow className="border-gray-200 bg-gray-50">
                  <TableCell colSpan={5} className="p-0">
                    <div className="p-4">
                      <h3 className="text-lg font-semibold text-black mb-2">Details</h3>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                          <h4 className="text-sm font-medium text-gray-700 mb-1">Classification Reason</h4>
                          <p className="text-gray-700 text-sm">{item.classificationReason}</p>
                        </div>
                        <div>
                          <h4 className="text-sm font-medium text-gray-700 mb-1">SHA-256 Hash</h4>
                          <div className="flex items-center gap-2">
                            <code className="bg-gray-100 p-1 rounded text-xs text-gray-800 overflow-hidden overflow-ellipsis max-w-xs">
                              {item.sha256}
                            </code>
                            <Button
                              variant="ghost"
                              size="sm"
                              className="h-6 w-6 p-0"
                              onClick={(e: React.MouseEvent<HTMLButtonElement>) => {
                                e.stopPropagation()
                                copyToClipboard(item.sha256)
                              }}
                            >
                              <Copy className="h-3 w-3" />
                            </Button>
                          </div>
                        </div>
                      </div>
                      <div className="mt-4">
                        <h4 className="text-sm font-medium text-gray-700 mb-1">Recommended Action</h4>
                        <p className="text-sm text-gray-700">
                          {item.category === "Malicious"
                            ? "Remove this file immediately and investigate how it was introduced to your codebase."
                            : item.category === "Suspicious"
                              ? "Review this file carefully and consider removing or replacing it if its functionality is not essential."
                              : "Evaluate if this file is necessary for your application and consider safer alternatives."}
                        </p>
                      </div>
                    </div>
                  </TableCell>
                </TableRow>
              )}
            </>
          ))}
        </TableBody>
      </Table>
    </div>
  )
}
